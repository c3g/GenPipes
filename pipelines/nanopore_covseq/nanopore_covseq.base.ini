[DEFAULT]
# Cluster
cluster_server=abacus.genome.mcgill.ca
cluster_submit_cmd_suffix= | grep "[0-9]"
cluster_other_arg=-m ae -M $JOB_MAIL -W umask=0002
cluster_work_dir_arg=-d
cluster_output_dir_arg=-j oe -o
cluster_job_name_arg=-N
cluster_cmd_produces_job_id=true
cluster_dependency_arg=-W depend=afterok:
cluster_dependency_sep=:
cluster_max_jobs=30000
tmp_dir=${TMPDIR:=/tmp}
portal_output_dir=$PORTAL_OUTPUT_DIR

cluster_walltime = 8:00:00
cluster_cpu = 1
cluster_node = 1

ALL_CPU=32
HALF_CPU=16
QUART_CPU=8
PINT_CPU=4

ALL_MEM=187G
HALF_MEM=90G
QUART_MEM=60G
PINT_MEM=30G
cluster_mem = 5000M per cpu
cluster_queue = -q sw
LARGE_QUEUE = -q lm
GPU_QUEUE = -q gpu-general


# Modules
module_artic=mugqic/ARTIC/1.2.1
module_bedtools=mugqic/bedtools/2.26.0
module_blast=mugqic/blast/2.2.29+
module_java=mugqic/java/openjdk-jdk1.8.0_72
module_gatk=mugqic/GenomeAnalysisTK/3.8
module_guppy=mugqic/guppy/gpu-4.5.2
module_htslib=mugqic/htslib/1.11
module_kraken2=mugqic/kraken2/2.1.0
module_minimap2=mugqic/minimap2/2.17
module_mugqic_R_packages=mugqic/mugqic_R_packages/1.0.6
module_mugqic_tools=mugqic/mugqic_tools/2.8.0
module_ncovtools=mugqic/ncov-tools/1.8
module_pandoc=mugqic/pandoc/1.15.2
module_picard=mugqic/picard/2.9.0
module_pigz=mugqic/pigz/2.4
module_python=mugqic/python/3.9.1
module_pycoqc=mugqic/pycoQC/2.5.2
module_quast=mugqic/Quast/5.0.2
module_R=mugqic/R_Bioconductor/3.5.0_3.7
module_sambamba=mugqic/sambamba/0.8.0
module_samtools=mugqic/samtools/1.12
module_snpeff=mugqic/snpEff/4.5covid19
module_verify_bam_id=mugqic/verifyBamID/1.1.3
module_wub=mugqic/wub/0.5.1
module_CoVSeQ_tools=mugqic/CoVSeQ_tools/1.2.0

# Genome
scientific_name=Coronavirinae
common_name=Coronavirus
assembly=SARS-CoV-2
source=NCBI
version=
assembly_synonyms=MN908947.3
assembly_dir=$MUGQIC_INSTALL_HOME/genomes/species/%(scientific_name)s.%(assembly)s
genome_fasta=%(assembly_dir)s/genome/%(scientific_name)s.%(assembly)s.fa
genome_dictionary=%(assembly_dir)s/genome/%(scientific_name)s.%(assembly)s.dict
genome_bwa_index=%(assembly_dir)s/genome/bwa_index/%(scientific_name)s.%(assembly)s.fa
igv_genome=%(genome_fasta)s.fai
snpeff_genome=%(assembly_synonyms)s
known_variants=

instrument_type=promethion
amplicon_scheme=ARTIC_v3
blast_db=$MUGQIC_INSTALL_HOME/genomes/blast_db/nt

java_other_options=-XX:ParallelGCThreads=4

run_name=

[guppy_basecall]
# If transfer_to_tmp is set to False the transfer will be skipped and the basecalling will be done where the data are stored: transfer_to_tmp=False
transfer_to_tmp = True
basecall_protocol = "dna_r9.4.1_450bps_hac.cfg"
min_Q_score = 7
# Custom path to data folder can be specified within other_options: --data_path /path/to/data
other_options = --num_callers 8 --gpu_runners_per_device 160 --chunks_per_runner 2000 --chunk_size 1000 --data_path /cvmfs/soft.mugqic/CentOS6/software/guppy/ont-guppy-4.5.2/data
cluster_cpu = 8
cluster_gpu = 1
transfer_threads = 5
cluster_walltime = -l walltime=24:00:0
cluster_queue = %(GPU_QUEUE)s

[guppy_demultiplex]
cluster_cpu = 8
transfer_threads = %(cluster_cpu)s
# If transfer_to_tmp is set to False the transfer will be skipped and the basecalling will be done where the data are stored: transfer_to_tmp=False
transfer_to_tmp = True
# IMPORTANT: Choose the appropriate arrangement files for the barcodes used during library prep
arrangements_files = "barcode_arrs_nb96.cfg"
# IMPORTANT: for CoVSeQ applications, it is important to require barcodes on both ends
# Custom path to data folder can be specified within other_options: --data_path /path/to/data
other_options = --require_barcodes_both_ends --worker_threads %(cluster_cpu)s --num_barcoding_buffers 32 --data_path /cvmfs/soft.mugqic/CentOS6/software/guppy/ont-guppy-4.5.2/data/barcoding
cluster_gpu = 1
cluster_walltime = -l walltime=24:00:0
cluster_queue = %(GPU_QUEUE)s

[pycoqc]
min_pass_qual = 7
#other_options= <any other options passed to pycoqc>
cluster_cpu = %(ALL_CPU)s
cluster_walltime = 00:30:0

[host_reads_removal]
cluster_cpu = %(QUART_CPU)s
preset = map-ont
minimap2_other_options =
# To remove host reads adapt the regex match: /chr*/
# This one will match any chromosome beginning with chr (for human host)
sambamba_view_other_options = -f bam -F "not (ref_name =~ /chr*/ and mapping_quality >= 0)"
samtools_bam2fq_other_options =
samtools_bam2fq_threads = %(cluster_cpu)s
cluster_walltime = 06:00:00

[kraken_analysis]
cluster_cpu = %(PINT_CPU)s
kraken2_other_options = --quick
kraken2_threads = %(cluster_cpu)s
# To be changed to approptiate location and match with kraken2 module above
kraken2_database = $MUGQIC_INSTALL_HOME/software/kraken2/kraken2-2.1.0/db
pigz_threads = %(cluster_cpu)s
cluster_walltime = 06:00:00

[artic_nanopolish]
cluster_cpu = %(QUART_CPU)s
min_length = 400
max_length = 700
threads = %(cluster_cpu)s
normalise = 800
primers_dir = $MUGQIC_INSTALL_HOME/genomes/artic-ncov2019/primer_schemes
# This has to be in primers_dir
primers_version = nCoV-2019/V3
cluster_walltime = 06:00:00

[wub_metrics]
cluster_walltime = 02:00:00
cluster_mem = 8G

[covseq_metrics]
module_python = mugqic/python/3.6.5
cluster_walltime = 02:00:00
cluster_mem = 8G

[quast_consensus_metrics]
reference_genome = %(genome_fasta)s
genomic_feature = 
cluster_cpu = %(PINT_CPU)s
threads = %(cluster_cpu)s
cluster_walltime = 02:00:0

[rename_consensus_header]
sequencing_technology = nanopore
country = Canada
province = Qc
year = 2022
seq_method = ONT_ARTIC
assemb_method = bcftools
snv_call_method = nanopolish
cluster_walltime = 02:00:00

[prepare_report]
module_R = mugqic/R_Bioconductor/3.5.3_3.8
reference_genome = %(genome_fasta)s
primer_prefix = nCoV-2019
amplicon_bed = %(assembly_dir)s/annotations/%(scientific_name)s.%(assembly)s.%(amplicon_scheme)s_amplicon.bed
primer_bed = %(assembly_dir)s/annotations/%(scientific_name)s.%(assembly)s.%(amplicon_scheme)s_primers.bed
# the sequencing platform used, can be "oxford-nanopore" or "illumina"
platform = oxford-nanopore
sequencing_technology = nanopore
cluster_cpu = %(PINT_CPU)s
nb_threads = %(cluster_cpu)s
cluster_walltime = 6:00:00
cluster_dependency_arg = afterany

[snpeff_annotate]
ram = 8G
cluster_walltime = 06:00:00
cluster_dependency_arg = afterany
