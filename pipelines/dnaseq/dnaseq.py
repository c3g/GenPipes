#!/usr/bin/env python

################################################################################
# Copyright (C) 2014, 2015 GenAP, McGill University and Genome Quebec Innovation Centre
#
# This file is part of MUGQIC Pipelines.
#
# MUGQIC Pipelines is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MUGQIC Pipelines is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with MUGQIC Pipelines.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

# Python Standard Modules
import logging
import math
import os
import re
import sys

# Append mugqic_pipelines directory to Python library path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))))

# MUGQIC Modules
from core.config import *
from core.job import *
from pipelines import common
from core.pipeline import *
from bfx.readset import *
from bfx.sequence_dictionary import *

from bfx import adapters
from bfx import bvatools
from bfx import bwa
from bfx import gatk4
from bfx import igvtools
from bfx import metrics
from bfx import samtools
from bfx import snpeff
from bfx import tools
from bfx import vcftools
from bfx import skewer
from bfx import sambamba
from bfx import picard
from bfx import picard2
from bfx import vt
from bfx import htslib
from bfx import gemini
from bfx import qualimap
from bfx import fastqc
from bfx import multiqc
from bfx import deliverables

log = logging.getLogger(__name__)


    

class DnaSeqRaw(common.Illumina):
    """
    DNA-Seq Pipeline
    ================

    The standard MUGQIC DNA-Seq pipeline uses BWA to align reads to the reference genome. Treatment
    and filtering of mapped reads approaches as INDEL realignment, mark duplicate reads, recalibration
    and sort are executed using Picard and GATK. Samtools MPILEUP and bcftools are used to produce
    the standard SNP and indels variants file (VCF). Additional SVN annotations mostly applicable
    to human samples include mappability flags, dbSNP annotation and extra information about SVN
    by using published databases.  The SNPeff tool is used to annotate variants using an integrated database
    of functional predictions from multiple algorithms (SIFT, Polyphen2, LRT and MutationTaster, PhyloP and GERP++, etc.)
    and to calculate the effects they produce on known genes. A list of effects and annotations
    that SnpEff calculate can be found [here](http://snpeff.sourceforge.net/faq.html#What_effects_are_predicted?).

    A summary html report is automatically generated by the pipeline. This report contains description
    of the sequencing experiment as well as a detailed presentation of the pipeline steps and results.
    Various Quality Control (QC) summary statistics are included in the report and additional QC analysis
    is accessible for download directly through the report. The report includes also the main references
    of the software and methods used during the analysis, together with the full list of parameters
    that have been passed to the pipeline main script.

    An example of the DNA-Seq report for an analysis on public data  is available for illustration purpose only:
    [DNA-Seq report](http://gqinnovationcenter.com/services/bioinformatics/tools/dnaReport/index.html).

    [Here](https://bitbucket.org/mugqic/mugqic_pipelines/downloads/MUGQIC_Bioinfo_DNA-Seq.pptx)
    is more information about DNA-Seq pipeline that you may find interesting.
    """

    def __init__(self, protocol=None):
        self._protocol=protocol
        # Add pipeline specific arguments
        super(DnaSeqRaw, self).__init__(protocol)

    @property
    def sequence_dictionary(self):
        if not hasattr(self, "_sequence_dictionary"):
            self._sequence_dictionary = parse_sequence_dictionary_file(config.param('DEFAULT', 'genome_dictionary', type='filepath'), variant=True)
        return self._sequence_dictionary

    def generate_approximate_windows(self, nb_jobs):
        if nb_jobs <= len(self.sequence_dictionary):
            return [sequence['name'] + ":1-" + str(sequence['length']) for sequence in self.sequence_dictionary]
        else:
            total_length = sum([sequence['length'] for sequence in self.sequence_dictionary])
            approximate_window_size = int(math.floor(total_length / (nb_jobs - len(self.sequence_dictionary))))
            windows = []

            for sequence in self.sequence_dictionary:
                for start, end in [[pos, min(pos + approximate_window_size - 1, sequence['length'])] for pos in range(1, sequence['length'] + 1, approximate_window_size)]:
                    windows.append(sequence['name'] + ":" + str(start) + "-" + str(end))
            return windows

    def sym_link_fastq(self):
        """

        :return:
        """

        jobs =[]
        sym_link_job = []

        for readset in self.readsets:
            if readset.bam:
                prefix = re.sub("\.bam$", ".", readset.bam)

            if readset.run_type == "PAIRED_END":
                if readset.fastq1 and readset.fastq2:
                    sym_link_job= concat_jobs([
                        deliverables.sym_link(readset.fastq1, readset, type="raw_reads"),
                        deliverables.sym_link(readset.fastq2, readset, type="raw_reads"),
                    ], name="sym_link_fastq.pair_end." + readset.name)

                elif not readset.fastq1:
                    if readset.bam:
                        fastq1 = prefix + "pair1.fastq.gz"
                        fastq2 = prefix + "pair2.fastq.gz"
                        sym_link_job = concat_jobs([
                            deliverables.sym_link(fastq1, readset, type="raw_reads"),
                            deliverables.sym_link(fastq2, readset, type="raw_reads"),
                        ], name="sym_link_fastq.pair_end." + readset.name)

            elif readset.run_type == "SINGLE_END":
                if readset.fastq1:
                    sym_link_job = concat_jobs([
                        deliverables.sym_link(readset.fastq1, readset, type="raw_reads"),
                    ], name="sym_link_fastq.single_end." + readset.name)

                elif not readset.fastq1:
                    if readset.bam:
                        fastq1 = prefix + "pair1.fastq.gz"
                        sym_link_job = concat_jobs([
                            deliverables.sym_link(fastq1, readset, type="raw_reads"),
                        ], name="sym_link_fastq.single_end." + readset.name)

            else:
                raise Exception("Error: run type \"" + readset.run_type +
                "\" is invalid for readset \"" + readset.name + "\" (should be PAIRED_END or SINGLE_END)!")

            jobs.append(sym_link_job)

        return jobs

    def skewer_trimming(self):
        """
        """

        jobs = []

        for readset in self.readsets:
            output_dir = os.path.join("trim", readset.sample.name)
            trim_file_prefix = os.path.join(output_dir, readset.name)

            adapter_file = config.param('skewer_trimming', 'adapter_file', required=False, type='filepath')
            adapter_job = None

            if not adapter_file:
                adapter_file = os.path.join(output_dir, "adapter.tsv")
                adapter_job = adapters.create(readset, adapter_file)

            if readset.run_type == "PAIRED_END":
                candidate_input_files = [[readset.fastq1, readset.fastq2]]
                if readset.bam:
                    candidate_input_files.append([re.sub("\.bam$", ".pair1.fastq.gz", readset.bam), re.sub("\.bam$", ".pair2.fastq.gz", readset.bam)])
                [fastq1, fastq2] = self.select_input_files(candidate_input_files)
            
            elif readset.run_type == "SINGLE_END":
                candidate_input_files = [[readset.fastq1]]
                if readset.bam:
                    candidate_input_files.append([re.sub("\.bam$", ".single.fastq.gz", readset.bam)])
                [fastq1] = self.select_input_files(candidate_input_files)
                fastq2 = None
            
            else:
                raise Exception("Error: run type \"" + readset.run_type +
                "\" is invalid for readset \"" + readset.name + "\" (should be PAIRED_END or SINGLE_END)!")

            jobs.append(concat_jobs([
                Job(command="mkdir -p " + output_dir, removable_files=[output_dir], samples=[readset.sample]),
                adapter_job,
                skewer.trim(fastq1, fastq2, trim_file_prefix, adapter_file),
                Job([trim_file_prefix + "-trimmed-pair1.fastq.gz"], [trim_file_prefix + ".trim.pair1.fastq.gz"], command="ln -s -f " + os.path.abspath(trim_file_prefix + "-trimmed-pair1.fastq.gz ") + trim_file_prefix + ".trim.pair1.fastq.gz"),
                Job([trim_file_prefix + "-trimmed-pair2.fastq.gz"], [trim_file_prefix + ".trim.pair2.fastq.gz"], command="ln -s -f " + os.path.abspath(trim_file_prefix + "-trimmed-pair2.fastq.gz ") + trim_file_prefix + ".trim.pair2.fastq.gz"),
            ],name="skewer_trimming." + readset.name))

        return jobs

    def bwa_mem_picard_sort_sam(self):
        """
        The filtered reads are aligned to a reference genome. The alignment is done per sequencing readset.
        The alignment software used is [BWA](http://bio-bwa.sourceforge.net/) with algorithm: bwa mem.
        BWA output BAM files are then sorted by coordinate using [Picard](http://broadinstitute.github.io/picard/).

        This step takes as input files:

        1. Trimmed FASTQ files if available
        2. Else, FASTQ files from the readset file if available
        3. Else, FASTQ output files from previous picard_sam_to_fastq conversion of BAM files
        """

        jobs = []
        for readset in self.readsets:
            trim_file_prefix = os.path.join("trim", readset.sample.name, readset.name + ".trim.")
            alignment_directory = os.path.join("alignment", readset.sample.name)
            readset_bam = os.path.join(alignment_directory, readset.name, readset.name + ".sorted.bam")

            # Find input readset FASTQs first from previous trimmomatic job, then from original FASTQs in the readset sheet
            if readset.run_type == "PAIRED_END":
                candidate_input_files = [[trim_file_prefix + "pair1.fastq.gz", trim_file_prefix + "pair2.fastq.gz"]]
                if readset.fastq1 and readset.fastq2:
                    candidate_input_files.append([readset.fastq1, readset.fastq2])
                if readset.bam:
                    candidate_input_files.append([re.sub("\.bam$", ".pair1.fastq.gz", readset.bam), re.sub("\.bam$", ".pair2.fastq.gz", readset.bam)])
                [fastq1, fastq2] = self.select_input_files(candidate_input_files)
            
            elif readset.run_type == "SINGLE_END":
                candidate_input_files = [[trim_file_prefix + "single.fastq.gz"]]
                if readset.fastq1:
                    candidate_input_files.append([readset.fastq1])
                if readset.bam:
                    candidate_input_files.append([re.sub("\.bam$", ".single.fastq.gz", readset.bam)])
                [fastq1] = self.select_input_files(candidate_input_files)
                fastq2 = None
            
            else:
                raise Exception("Error: run type \"" + readset.run_type +
                "\" is invalid for readset \"" + readset.name + "\" (should be PAIRED_END or SINGLE_END)!")

            job = concat_jobs([
                Job(command="mkdir -p " + os.path.dirname(readset_bam), samples=[readset.sample]),
                pipe_jobs([
                    bwa.mem(
                        fastq1,
                        fastq2,
                        read_group="'@RG" + \
                            "\tID:" + readset.name + \
                            "\tSM:" + readset.sample.name + \
                            "\tLB:" + (readset.library if readset.library else readset.sample.name) + \
                            ("\tPU:run" + readset.run + "_" + readset.lane if readset.run and readset.lane else "") + \
                            ("\tCN:" + config.param('bwa_mem', 'sequencing_center') if config.param('bwa_mem', 'sequencing_center', required=False) else "") + \
                            "\tPL:Illumina" + \
                            "'"
                    ),
                    picard.sort_sam(
                        "/dev/stdin",
                        readset_bam,
                        "coordinate"
                    )
                ])
            ])
            job.name = "bwa_mem_picard_sort_sam." + readset.name
            job.samples = [readset.sample]

            jobs.append(job)

        return jobs

    def sambamba_merge_sam_files(self):
        """
        BAM readset files are merged into one file per sample. Merge is done using [Picard](http://broadinstitute.github.io/picard/).

        This step takes as input files:

        1. Aligned and sorted BAM output files from previous bwa_mem_picard_sort_sam step if available
        2. Else, BAM files from the readset file
        """

        jobs = []
        for sample in self.samples:
            alignment_directory = os.path.join("alignment", sample.name)
            # Find input readset BAMs first from previous bwa_mem_picard_sort_sam job, then from original BAMs in the readset sheet.
            readset_bams = self.select_input_files([[os.path.join(alignment_directory, readset.name, readset.name + ".sorted.bam") for readset in sample.readsets], [readset.bam for readset in sample.readsets]])
            sample_bam = os.path.join(alignment_directory, sample.name + ".sorted.bam")

            mkdir_job = Job(command="mkdir -p " + os.path.dirname(sample_bam), samples=[sample])

            # If this sample has one readset only, create a sample BAM symlink to the readset BAM, along with its index.
            if len(sample.readsets) == 1:
                readset_bam = readset_bams[0]
                if os.path.isabs(readset_bam):
                    target_readset_bam = readset_bam
                else:
                    target_readset_bam = os.path.abspath(readset_bam)
                readset_index = re.sub("\.bam$", ".bai", readset_bam)
                target_readset_index = re.sub("\.bam$", ".bai", target_readset_bam)
                sample_index = re.sub("\.bam$", ".bai", sample_bam)

                job = concat_jobs([
                    mkdir_job,
                    Job([readset_bam], [sample_bam], command="ln -s -f " + target_readset_bam + " " + sample_bam, removable_files=[sample_bam]),
                    Job([readset_index], [sample_index], command="ln -s -f " + target_readset_index + " " + sample_index + " && sleep 180", removable_files=[sample_index])
                ], name="symlink_readset_sample_bam." + sample.name)

            elif len(sample.readsets) > 1:
                job = concat_jobs([
                    mkdir_job,
                    sambamba.merge(readset_bams, sample_bam)
                ])
                job.name = "sambamba_merge_sam_files." + sample.name

            jobs.append(job)

        return jobs

    def picard_merge_sam_files(self):
        """
        BAM readset files are merged into one file per sample. Merge is done using [Picard](http://broadinstitute.github.io/picard/).

        This step takes as input files:

        1. Aligned and sorted BAM output files from previous bwa_mem_picard_sort_sam step if available
        2. Else, BAM files from the readset file
        """

        jobs = []
        for sample in self.samples:
            alignment_directory = os.path.join("alignment", sample.name)
            # Find input readset BAMs first from previous bwa_mem_picard_sort_sam job, then from original BAMs in the readset sheet.
            readset_bams = self.select_input_files([[os.path.join(alignment_directory, readset.name, readset.name + ".sorted.UMI.bam") for readset in sample.readsets], [os.path.join(alignment_directory, readset.name, readset.name + ".sorted.bam") for readset in sample.readsets], [readset.bam for readset in sample.readsets]])
            sample_bam = os.path.join(alignment_directory, sample.name + ".sorted.bam")

            mkdir_job = Job(command="mkdir -p " + os.path.dirname(sample_bam), samples=[sample])

            # If this sample has one readset only, create a sample BAM symlink to the readset BAM, along with its index.
            if len(sample.readsets) == 1:
                readset_bam = readset_bams[0]
                if os.path.isabs(readset_bam):
                    target_readset_bam = readset_bam
                else:
                    target_readset_bam = os.path.relpath(readset_bam, alignment_directory)
                readset_index = re.sub("\.bam$", ".bai", readset_bam)
                target_readset_index = re.sub("\.bam$", ".bai", target_readset_bam)
                sample_index = re.sub("\.bam$", ".bai", sample_bam)

                job = concat_jobs([
                    mkdir_job,
                    Job([readset_bam], [sample_bam], command="ln -s -f " + target_readset_bam + " " + sample_bam, removable_files=[sample_bam]),
                    Job([readset_index], [sample_index], command="ln -s -f " + target_readset_index + " " + sample_index + " && sleep 180", removable_files=[sample_index])
                ], name="symlink_readset_sample_bam." + sample.name)
                job.samples=[sample]

            elif len(sample.readsets) > 1:
                job = concat_jobs([
                    mkdir_job,
                    gatk4.merge_sam_files(readset_bams, sample_bam)
                ])
                job.samples=[sample]
                job.name = "picard_merge_sam_files." + sample.name

            jobs.append(job)

        return jobs

    def gatk_indel_realigner(self):
        """
        Insertion and deletion realignment is performed on regions where multiple base mismatches
        are preferred over indels by the aligner since it can appear to be less costly by the algorithm.
        Such regions will introduce false positive variant calls which may be filtered out by realigning
        those regions properly. Realignment is done using [GATK](https://www.broadinstitute.org/gatk/).
        The reference genome is divided by a number regions given by the `nb_jobs` parameter.
        """

        jobs = []

        nb_jobs = config.param('gatk_indel_realigner', 'nb_jobs', type='posint')
        if nb_jobs > 50:
            log.warning("Number of realign jobs is > 50. This is usually much. Anything beyond 20 can be problematic.")

        for sample in self.samples:
            alignment_directory = os.path.join("alignment", sample.name)
            realign_directory = os.path.join(alignment_directory, "realign")
            input = os.path.join(alignment_directory, sample.name + ".sorted.bam")

            if nb_jobs == 1:
                realign_prefix = os.path.join(realign_directory, "all")
                realign_intervals = realign_prefix + ".intervals"
                output_bam = realign_prefix + ".bam"
                sample_output_bam = os.path.join(alignment_directory, sample.name + ".realigned.sorted.bam")
                jobs.append(concat_jobs([
                    Job(
                        command="mkdir -p " + realign_directory,
                        removable_files=[realign_directory],
                        samples=[sample]
                    ),
                    gatk4.realigner_target_creator(input, realign_intervals),
                    gatk4.indel_realigner(input, output=output_bam, target_intervals=realign_intervals),
                    # Create sample realign symlink since no merging is required
                    Job(
                        [output_bam],
                        [sample_output_bam],
                        command="ln -s -f " + os.path.relpath(output_bam, os.path.dirname(sample_output_bam)) + " " + sample_output_bam
                    )
                ], name="gatk_indel_realigner." + sample.name))

            else:
                # The first sequences are the longest to process.
                # Each of them must be processed in a separate job.
                unique_sequences_per_job,unique_sequences_per_job_others = split_by_size(self.sequence_dictionary, nb_jobs - 1)

                # Create one separate job for each of the first sequences
                for idx,sequence in enumerate(unique_sequences_per_job):
                    realign_prefix = os.path.join(realign_directory)
                    realign_intervals = os.path.join(realign_prefix, sample.name + ".sorted.realigned." + str(idx) + ".intervals")
                    intervals=sequence
                    if str(idx) == 0:
                        intervals.append("unmapped")
                    output_bam = os.path.join(realign_prefix, sample.name + ".sorted.realigned." + str(idx) + ".bam")
                    jobs.append(concat_jobs([
                        # Create output directory since it is not done by default by GATK tools
                        Job(command="mkdir -p " + realign_directory, removable_files=[realign_directory], samples=[sample]),
                        gatk4.realigner_target_creator(input, realign_intervals, intervals=intervals),
                        gatk4.indel_realigner(input, output=output_bam, target_intervals=realign_intervals, intervals=intervals)
                    ], name="gatk_indel_realigner." + sample.name + "." + str(idx)))

                # Create one last job to process the last remaining sequences and 'others' sequences
                realign_prefix = os.path.join(realign_directory)
                realign_intervals = os.path.join(realign_prefix, sample.name + ".sorted.realigned.others.intervals")
                output_bam = os.path.join(realign_prefix, sample.name + ".sorted.realigned.others.bam")
                jobs.append(concat_jobs([
                    # Create output directory since it is not done by default by GATK tools
                    Job(command="mkdir -p " + realign_directory, removable_files=[realign_directory], samples=[sample]),
                    gatk4.realigner_target_creator(input, realign_intervals, exclude_intervals=unique_sequences_per_job_others),
                    gatk4.indel_realigner(input, output=output_bam, target_intervals=realign_intervals, exclude_intervals=unique_sequences_per_job_others)
                ], name="gatk_indel_realigner." + sample.name + ".others"))

        return jobs

    def merge_realigned(self):
        """
        BAM files of regions of realigned reads are merged per sample using [Picard](http://broadinstitute.github.io/picard/).
        """

        jobs = []

        nb_jobs = config.param('gatk_indel_realigner', 'nb_jobs', type='posint')

        for sample in self.samples:
            alignment_directory = os.path.join("alignment", sample.name)
            realign_directory = os.path.join(alignment_directory, "realign")
            merged_realigned_bam = os.path.join(alignment_directory, sample.name + ".realigned.sorted.bam")

            # if nb_jobs == 1, symlink has been created in indel_realigner and merging is not necessary
            if nb_jobs > 1:
                unique_sequences_per_job,unique_sequences_per_job_others = split_by_size(self.sequence_dictionary, nb_jobs - 1)

                inputBAMs = []
                for idx,sequences in enumerate(unique_sequences_per_job):
                    inputBAMs.append(os.path.join(realign_directory, sample.name + "." + str(idx) + ".bam"))
                inputBAMs.append(os.path.join(realign_directory, sample.name + ".others.bam"))
                
                job = gatk4.merge_sam_files(inputBAMs, merged_realigned_bam)
                job.name = "merge_realigned." + sample.name
                job.samples = [sample]
                jobs.append(job)

        return jobs

    def sambamba_merge_realigned(self):
            """
            BAM files of regions of realigned reads are merged per sample using [Sambamba](http://lomereiter.github.io/sambamba/index.html).
            """

            jobs = []

            nb_jobs = config.param('gatk_indel_realigner', 'nb_jobs', type='posint')

            for sample in self.samples:
                alignment_directory = os.path.join("alignment", sample.name)
                realign_directory = os.path.join(alignment_directory, "realign")
                merged_realigned_bam = os.path.join(alignment_directory, sample.name + ".realigned.sorted.bam")

                # if nb_jobs == 1, symlink has been created in indel_realigner and merging is not necessary
                if nb_jobs > 1:
                    unique_sequences_per_job, unique_sequences_per_job_others = split_by_size(self.sequence_dictionary,
                                                                                              nb_jobs - 1)

                    inputs = []
                    for idx, sequences in enumerate(unique_sequences_per_job):
                        inputs.append(
                            os.path.join(realign_directory, sample.name + ".sorted.realigned." + str(idx) + ".bam"))
                    inputs.append(os.path.join(realign_directory, sample.name + ".sorted.realigned.others.bam"))

                    job = sambamba.merge(inputs, merged_realigned_bam)
                    job.name = "sambamba_merge_realigned." + sample.name
                    job.samples = [sample]
                    jobs.append(job)

            return jobs


    def fix_mate_by_coordinate(self):
        """
        Fix the read mates. Once local regions are realigned, the read mate coordinates of the aligned reads
        need to be recalculated since the reads are realigned at positions that differ from their original alignment.
        Fixing the read mate positions is done using [BVATools](https://bitbucket.org/mugqic/bvatools).
        """

        jobs = []
        for sample in self.samples:
            alignment_file_prefix = os.path.join("alignment", sample.name, sample.name + ".")
            input = alignment_file_prefix + "realigned.sorted.bam"
            output_prefix = alignment_file_prefix + "matefixed.sorted"
            jobs.append(concat_jobs([
                Job(samples=[sample]),
                bvatools.groupfixmate(input, output_prefix + ".tmp.bam"),
                gatk4.sort_sam(output_prefix + ".tmp.bam", output_prefix + ".bam"),
            ], name="fix_mate_by_coordinate." + sample.name))

        return jobs

    def picard_mark_duplicates(self):
        """
        Mark duplicates. Aligned reads per sample are duplicates if they have the same 5' alignment positions
        (for both mates in the case of paired-end reads). All but the best pair (based on alignment score)
        will be marked as a duplicate in the BAM file. Marking duplicates is done using [Picard](http://broadinstitute.github.io/picard/).
        """

        jobs = []
        for sample in self.samples:
            alignment_file_prefix = os.path.join("alignment", sample.name, sample.name + ".")
            input =  self.select_input_files([[alignment_file_prefix + "matefixed.sorted.bam"] , [alignment_file_prefix +"realigned.sorted.bam"], [alignment_file_prefix + "sorted.bam"]])
            output = alignment_file_prefix + "sorted.dup.bam"
            metrics_file = alignment_file_prefix + "sorted.dup.metrics"

            job = gatk4.picard_mark_duplicates(input, output, metrics_file)
            job.name = "picard_mark_duplicates." + sample.name
            job.samples = [sample]
            jobs.append(job)

        return jobs

    def gatk_mark_duplicates(self):
        """
        GATK version of Mark duplicates. A better duplication marking algorithm that handles all cases including clipped and gapped alignments
        Aligned reads per sample are duplicates if they have the same 5' alignment positions
        (for both mates in the case of paired-end reads). All but the best pair (based on alignment score)
        will be marked as a duplicate in the BAM file.
        """
    
        jobs = []
        for sample in self.samples:
            alignment_file_prefix = os.path.join("alignment", sample.name, sample.name + ".")
            input = self.select_input_files([[alignment_file_prefix + "matefixed.sorted.bam"], [alignment_file_prefix + "realigned.sorted.bam"], [alignment_file_prefix + "sorted.bam"]])
            output = alignment_file_prefix + "sorted.dup.bam"
            metrics_file = alignment_file_prefix + "sorted.dup.metrics"
    
            job = gatk4.mark_duplicates(input, output, metrics_file)
            job.name = "gatk_mark_duplicates." + sample.name
            job.samples = [sample]
            jobs.append(job)
    
        return jobs

    def sambamba_mark_duplicates(self):
        """
        Mark duplicates. Aligned reads per sample are duplicates if they have the same 5' alignment positions
        (for both mates in the case of paired-end reads). All but the best pair (based on alignment score)
        will be marked as a duplicate in the BAM file. Marking duplicates is done using [Picard](http://broadinstitute.github.io/picard/).
        """

        jobs = []
        for sample in self.samples:
            alignment_file_prefix = os.path.join("alignment", sample.name, sample.name + ".")
            input = self.select_input_files([[alignment_file_prefix + "matefixed.sorted.bam"],[alignment_file_prefix + "realigned.sorted.bam"],[alignment_file_prefix + "sorted.bam"]])
            output = alignment_file_prefix + "sorted.dup.bam"

            job = sambamba.markdup(input, output)
            job.name = "sambamba_mark_duplicates." + sample.name
            job.samples = [sample]
            jobs.append(job)

        return jobs

    def recalibration(self):
        """
        Recalibrate base quality scores of sequencing-by-synthesis reads in an aligned BAM file. After recalibration,
        the quality scores in the QUAL field in each read in the output BAM are more accurate in that
        the reported quality score is closer to its actual probability of mismatching the reference genome.
        Moreover, the recalibration tool attempts to correct for variation in quality with machine cycle
        and sequence context, and by doing so, provides not only more accurate quality scores but also
        more widely dispersed ones.
        """

        jobs = []

        created_interval_lists = []

        for sample in self.samples:
            duplicate_file_prefix = os.path.join("alignment", sample.name, sample.name + ".sorted.dup.")
            input = duplicate_file_prefix + "bam"
            print_reads_output = duplicate_file_prefix + "recal.bam"
            base_recalibrator_output = duplicate_file_prefix + "recalibration_report.grp"

            interval_list = None
            
            coverage_bed = bvatools.resolve_readset_coverage_bed(sample.readsets[0])
            if coverage_bed:
                interval_list = re.sub("\.[^.]+$", ".interval_list", os.path.basename(coverage_bed))

                if not interval_list in created_interval_lists:
                    job = tools.bed2interval_list(None, coverage_bed, interval_list)
                    job.name = "interval_list." + os.path.basename(coverage_bed)
                    jobs.append(job)
                    created_interval_lists.append(interval_list)

            jobs.append(concat_jobs([
                gatk4.base_recalibrator(input, base_recalibrator_output, intervals=interval_list),
            ], name="gatk_base_recalibrator." + sample.name))

            if config.param('gatk_apply_bqsr', 'module_gatk').split("/")[2] > "3":
                jobs.append(concat_jobs([
                    gatk4.print_reads(input, print_reads_output, base_recalibrator_output),
		    sambamba.index(print_reads_output, print_reads_output + ".bai")
                ], name="gatk_print_reads." + sample.name))

            else:
                jobs.append(concat_jobs([
                    gatk4.print_reads(input, print_reads_output, base_recalibrator_output),
            	], name="gatk_print_reads." + sample.name))

        return jobs

    def sym_link_final_bam(self):
        jobs = []

        for sample in self.samples:
            inputs = os.path.join("alignment", sample.name, sample.name + ".sorted.dup.recal")

            jobs.append(concat_jobs([
                deliverables.sym_link(inputs + ".bam", sample, type="alignment"),
                deliverables.sym_link(inputs + ".bai", sample, type="alignment"),
                deliverables.sym_link(inputs + ".bam.md5", sample, type="alignment"),
            ], name="sym_link_final_bam." + sample.name))

        return jobs

    def metrics_dna_picard_metrics(self):

        ##check the library status
        library = {}
        for readset in self.readsets:
            if not library.has_key(readset.sample):
                library[readset.sample] = "SINGLE_END"
            if readset.run_type == "PAIRED_END":
                library[readset.sample] = "PAIRED_END"

        jobs = []
        for sample in self.samples:
            picard_directory = os.path.join("metrics", "dna", sample.name, "picard_metrics")
            input = os.path.join("alignment", sample.name, sample.name + ".sorted.dup.bam")
            
            mkdir_job = Job(command="mkdir -p " + picard_directory, removable_files=[picard_directory], samples=[sample])

            jobs.append(concat_jobs([
                mkdir_job,
                gatk4.collect_multiple_metrics(input, os.path.join(picard_directory + ".all.metrics"),
                                                library_type=library[sample])
            ], name="picard_collect_multiple_metrics." + sample.name))

            jobs.append(concat_jobs([
                mkdir_job,
                gatk4.collect_oxog_metrics(input, os.path.join(picard_directory + ".oxog_metrics.txt")),
            ], name="picard_collect_oxog_metrics." + sample.name))

            jobs.append(concat_jobs([
                mkdir_job,
                gatk4.collect_gcbias_metrics(input, os.path.join(picard_directory + ".qcbias_metrics.txt"),
                                               os.path.join(picard_directory + ".qcbias_metrics.pdf"),
                                               os.path.join(picard_directory + ".qcbias_summary_metrics.txt"))
            ], name="picard_collect_gcbias_metrics." + sample.name))

        return jobs

    def metrics_dna_sample_qualimap(self):

        jobs = []
        for sample in self.samples:
            qualimap_directory = os.path.join("metrics", "dna", sample.name, "qualimap", sample.name)
            input = os.path.join("alignment", sample.name, sample.name + ".sorted.dup.bam")
            output = os.path.join(qualimap_directory, "genome_results.txt")

            mkdir_job = Job(command="mkdir -p " + qualimap_directory, removable_files=[qualimap_directory], samples=[sample])
            use_bed = config.param('dna_sample_qualimap', 'use_bed', type='boolean', required=True)

            options = None
            if use_bed:
                bed = self.samples[0].readsets[0].beds[0]
                options = config.param('dna_sample_qualimap', 'qualimap_options') + " --feature-file " + bed

            else:
                options = config.param('dna_sample_qualimap', 'qualimap_options')

            jobs.append(concat_jobs([
                mkdir_job,
                qualimap.bamqc(input, qualimap_directory, output, options),
            ], name="dna_sample_qualimap." + sample.name))

        return jobs

    def metrics_dna_sambamba_flagstat(self):

        jobs = []
        for sample in self.samples:
            flagstat_directory = os.path.join("metrics", "dna", sample.name, "flagstat")
            input = os.path.join("alignment", sample.name, sample.name + ".sorted.dup.bam")
            output = os.path.join(flagstat_directory, sample.name + ".flagstat")

            mkdir_job = Job(command="mkdir -p " + flagstat_directory, removable_files=[flagstat_directory], samples=[sample])

            jobs.append(concat_jobs([
                mkdir_job,
                sambamba.flagstat(input, output, config.param('dna_sambamba_flagstat', 'flagstat_options')),
            ], name="dna_sambamba_flagstat." + sample.name))

        return jobs

    def metrics_dna_fastqc(self):

        jobs = []
        for sample in self.samples:
            fastqc_directory = os.path.join("metrics", "dna", sample.name, "fastqc")
            input = os.path.join("alignment", sample.name, sample.name + ".sorted.dup.bam")
            output_dir = os.path.join(fastqc_directory)
            output = os.path.join(fastqc_directory, sample.name + ".sorted.dup_fastqc.zip")

            mkdir_job = Job(command="mkdir -p " + output_dir, removable_files=[output_dir], samples=[sample])

            adapter_file = config.param('fastqc', 'adapter_file', required=False, type='filepath')
            adapter_job = None

            if not adapter_file:
                adapter_file = os.path.join(output_dir, "adapter.tsv")
                adapter_job = adapters.create(sample.readsets[0], adapter_file, fastqc=True)

            jobs.append(concat_jobs([
                mkdir_job,
                adapter_job,
                fastqc.fastqc(input, None, output_dir, output, adapter_file),
            ], name="fastqc." + sample.name))

        return jobs

    def run_multiqc(self):

        jobs = []

        metrics_directory = os.path.join("metrics", "dna")
        input_dep = []
        inputs = []
        for sample in self.samples:
            input_oxog = os.path.join(metrics_directory, sample.name, "picard_metrics.oxog_metrics.txt")
            input_qcbias = os.path.join(metrics_directory, sample.name, "picard_metrics.qcbias_metrics.txt")
            input_all_picard = os.path.join(metrics_directory, sample.name, "picard_metrics.all.metrics.quality_distribution.pdf")
            input_qualimap = os.path.join(metrics_directory, sample.name, "qualimap", sample.name, "genome_results.txt")
            input_fastqc = os.path.join(metrics_directory, sample.name, "fastqc", sample.name + ".sorted.dup_fastqc.zip")
            input_flagstat = os.path.join(metrics_directory, sample.name, "flagstat", sample.name + ".flagstat")

            input_dep = [input_oxog, input_qcbias, input_all_picard, input_qualimap, input_fastqc, input_flagstat]

            input = os.path.join(metrics_directory, sample.name)
        
            inputs.append(input)
            
        output = os.path.join(metrics_directory, "multiqc_report")
        jobs.append(concat_jobs([
            #Job(samples=[sample]),
            multiqc.run(inputs, output, input_dep),
        ], name="multiqc." + sample.name))

        return jobs

    def metrics(self):
        """
        Compute metrics and generate coverage tracks per sample. Multiple metrics are computed at this stage:
        Number of raw reads, Number of filtered reads, Number of aligned reads, Number of duplicate reads,
        Median, mean and standard deviation of insert sizes of reads after alignment, percentage of bases
        covered at X reads (%_bases_above_50 means the % of exons bases which have at least 50 reads)
        whole genome or targeted percentage of bases covered at X reads (%_bases_above_50 means the % of exons
        bases which have at least 50 reads). A TDF (.tdf) coverage track is also generated at this step
        for easy visualization of coverage in the IGV browser.
        """

        ##check the library status
        library = {}
        for readset in self.readsets:
            if not library.has_key(readset.sample) :
                library[readset.sample]="SINGLE_END"
            if readset.run_type == "PAIRED_END" :
                library[readset.sample]="PAIRED_END"

        jobs = []
        for sample in self.samples:
            recal_file_prefix = os.path.join("alignment", sample.name, sample.name + ".sorted.dup.recal.")
            input = recal_file_prefix + "bam"

            job = gatk4.collect_multiple_metrics(input, recal_file_prefix + "all.metrics",  library_type=library[sample])
            job.name = "picard_collect_multiple_metrics." + sample.name
            job.samples = [sample]
            jobs.append(job)

            # Compute genome coverage with gatk4
            job = gatk4.depth_of_coverage(input, recal_file_prefix + "all.coverage", bvatools.resolve_readset_coverage_bed(sample.readsets[0]))
            job.name = "gatk_depth_of_coverage." + sample.name + ".genome"
            job.samples = [sample]
            jobs.append(job)

            # Compute genome or target coverage with BVATools
            job = bvatools.depth_of_coverage(
                input,
                recal_file_prefix + "coverage.tsv",
                bvatools.resolve_readset_coverage_bed(sample.readsets[0]),
                other_options=config.param('bvatools_depth_of_coverage', 'other_options', required=False)
            )
            job.samples = [sample]
            job.name = "bvatools_depth_of_coverage." + sample.name
            job.samples = [sample]
            jobs.append(job)

            job = igvtools.compute_tdf(input, input + ".tdf")
            job.name = "igvtools_compute_tdf." + sample.name
            job.samples = [sample]
            jobs.append(job)

        return jobs

    def picard_calculate_hs_metrics(self):
        """
        Compute on target percent of hybridisation based capture.
        """

        jobs = []

        created_interval_lists = []

        for sample in self.samples:
            coverage_bed = bvatools.resolve_readset_coverage_bed(sample.readsets[0])
            if coverage_bed:
                interval_list = re.sub("\.[^.]+$", ".interval_list", os.path.basename(coverage_bed))

                if not interval_list in created_interval_lists:
                    job = tools.bed2interval_list(None, coverage_bed, interval_list)
                    job.name = "interval_list." + os.path.basename(coverage_bed)
                    jobs.append(job)
                    created_interval_lists.append(interval_list)

                recal_file_prefix = os.path.join("alignment", sample.name, sample.name + ".sorted.dup.recal.")
                job = gatk4.calculate_hs_metrics(recal_file_prefix + "bam", recal_file_prefix + "onTarget.tsv", interval_list)
                job.name = "picard_calculate_hs_metrics." + sample.name
                job.samples = [sample]
                jobs.append(job)
        return jobs

    def gatk_callable_loci(self):
        """
        Computes the callable region or the genome as a bed track.
        """

        jobs = []

        for sample in self.samples:
            alignment_file_prefix = os.path.join("alignment", sample.name, sample.name + ".")

            job = gatk4.callable_loci(alignment_file_prefix + "sorted.dup.recal.bam", alignment_file_prefix + "callable.bed", alignment_file_prefix + "callable.summary.txt")
            job.name = "gatk_callable_loci." + sample.name
            job.samples = [sample]
            jobs.append(job)

        return jobs

    def extract_common_snp_freq(self):
        """
        Extracts allele frequencies of possible variants accross the genome.
        """

        jobs = []

        for sample in self.samples:
            alignment_file_prefix = os.path.join("alignment", sample.name, sample.name + ".")

            job = bvatools.basefreq(alignment_file_prefix + "sorted.dup.recal.bam", alignment_file_prefix + "commonSNPs.alleleFreq.csv", config.param('extract_common_snp_freq', 'common_snp_positions', type='filepath'), 0)
            job.name = "extract_common_snp_freq." + sample.name
            job.samples = [sample]
            jobs.append(job)

        return jobs

    def baf_plot(self):
        """
        Plots DepthRatio and B allele frequency of previously extracted alleles.
        """

        jobs = []

        for sample in self.samples:
            alignment_file_prefix = os.path.join("alignment", sample.name, sample.name + ".")

            job = bvatools.ratiobaf(alignment_file_prefix + "commonSNPs.alleleFreq.csv", alignment_file_prefix + "ratioBAF", config.param('baf_plot', 'common_snp_positions', type='filepath'))
            job.name = "baf_plot." + sample.name
            job.samples = [sample]
            jobs.append(job)

        return jobs

    def gatk_haplotype_caller(self):
        """
        GATK haplotype caller for snps and small indels.
        """

        jobs = []

        created_interval_lists = []

        nb_haplotype_jobs = config.param('gatk_haplotype_caller', 'nb_jobs', type='posint')
        if nb_haplotype_jobs > 50:
            log.warning("Number of haplotype jobs is > 50. This is usually much. Anything beyond 20 can be problematic.")

        for sample in self.samples:
            alignment_directory = os.path.join("alignment", sample.name)
            haplotype_directory = os.path.join(alignment_directory, "rawHaplotypeCaller")
            input = self.select_input_files([[os.path.join(alignment_directory, sample.name + ".sorted.dup.recal.bam")],
                                             [os.path.join(alignment_directory, sample.name + ".sorted.dup.bam")],
                                             [os.path.join(alignment_directory, sample.name + ".sorted.bam")]])

            interval_list = None

            coverage_bed = bvatools.resolve_readset_coverage_bed(sample.readsets[0])
            if coverage_bed:
                interval_list = re.sub("\.[^.]+$", ".interval_list", coverage_bed)
    
                if not interval_list in created_interval_lists:
                    job = tools.bed2interval_list(None, coverage_bed, interval_list)
                    job.name = "interval_list." + os.path.basename(coverage_bed)
                    jobs.append(job)
                    created_interval_lists.append(interval_list)
                    
            if nb_haplotype_jobs == 1 or interval_list is not None:
                jobs.append(concat_jobs([
                    # Create output directory since it is not done by default by GATK tools
                    Job(command="mkdir -p " + haplotype_directory,removable_files=[haplotype_directory], samples=[sample]),
                    gatk4.haplotype_caller(input, os.path.join(haplotype_directory, sample.name + ".hc.g.vcf.gz"), interval_list=interval_list)
                ], name="gatk_haplotype_caller." + sample.name))
            
            else:
                unique_sequences_per_job,unique_sequences_per_job_others = split_by_size(self.sequence_dictionary_variant(), nb_haplotype_jobs - 1, variant=True)
       
                # Create one separate job for each of the first sequences
                for idx,sequences in enumerate(unique_sequences_per_job):
                    jobs.append(concat_jobs([
                        # Create output directory since it is not done by default by GATK tools
                        Job(command="mkdir -p " + haplotype_directory,removable_files=[haplotype_directory], samples=[sample]),
                        gatk4.haplotype_caller(input, os.path.join(haplotype_directory, sample.name + "." + str(idx) + ".hc.g.vcf.gz"), intervals=sequences, interval_list=interval_list)
                    ], name="gatk_haplotype_caller." + sample.name + "." + str(idx)))

                # Create one last job to process the last remaining sequences and 'others' sequences
                jobs.append(concat_jobs([
                    # Create output directory since it is not done by default by GATK tools
                    Job(command="mkdir -p " + haplotype_directory,removable_files=[haplotype_directory], samples=[sample]),
                    gatk4.haplotype_caller(input, os.path.join(haplotype_directory, sample.name + ".others.hc.g.vcf.gz"), exclude_intervals=unique_sequences_per_job_others, interval_list=interval_list)
                ], name="gatk_haplotype_caller." + sample.name + ".others"))

        return jobs

    def merge_and_call_individual_gvcf(self):
        """
        Merges the gvcfs of haplotype caller and also generates a per sample vcf containing genotypes.
        """

        jobs = []
        nb_haplotype_jobs = config.param('gatk_haplotype_caller', 'nb_jobs', type='posint')

        for sample in self.samples:
            haplotype_file_prefix = os.path.join("alignment", sample.name, "rawHaplotypeCaller", sample.name)
            output_haplotype_file_prefix = os.path.join("alignment", sample.name, sample.name)

            interval_list = None

            coverage_bed = bvatools.resolve_readset_coverage_bed(sample.readsets[0])
            if coverage_bed:
                interval_list = re.sub("\.[^.]+$", ".interval_list", coverage_bed)

            if nb_haplotype_jobs == 1 or interval_list is not None:

                jobs.append(concat_jobs([
                    Job(samples=[sample]),
                    Job([os.path.abspath(haplotype_file_prefix + ".hc.g.vcf.gz")], [output_haplotype_file_prefix + ".hc.g.vcf.gz"],
                        command="ln -sf " + os.path.abspath(haplotype_file_prefix + ".hc.g.vcf.gz") + " " + output_haplotype_file_prefix + ".hc.g.vcf.gz"),
                    Job([os.path.abspath(haplotype_file_prefix + ".hc.g.vcf.gz.tbi")], [output_haplotype_file_prefix + ".hc.g.vcf.gz.tbi"],
                        command="ln -sf " + os.path.abspath(haplotype_file_prefix + ".hc.g.vcf.gz.tbi") + " " + output_haplotype_file_prefix + ".hc.g.vcf.gz.tbi"),
                    gatk4.genotype_gvcf([output_haplotype_file_prefix + ".hc.g.vcf.gz"], output_haplotype_file_prefix + ".hc.vcf.gz", config.param('gatk_genotype_gvcf', 'options'))
                ], name="merge_and_call_individual_gvcf.call." + sample.name))
                
            else:
                unique_sequences_per_job,unique_sequences_per_job_others = split_by_size(self.sequence_dictionary_variant(), nb_haplotype_jobs - 1, variant=True)
                gvcfs_to_merge = [haplotype_file_prefix + "." + str(idx) + ".hc.g.vcf.gz" for idx in xrange(len(unique_sequences_per_job))]
                
                gvcfs_to_merge.append(haplotype_file_prefix + ".others.hc.g.vcf.gz")

                jobs.append(concat_jobs([
                    Job(samples=[sample]),
                    gatk4.cat_variants(gvcfs_to_merge, output_haplotype_file_prefix + ".hc.g.vcf.gz"),
                ], name="merge_and_call_individual_gvcf.merge." + sample.name))

                jobs.append(concat_jobs([
                    Job(samples=[sample]),
                    gatk4.genotype_gvcf([output_haplotype_file_prefix + ".hc.g.vcf.gz"], output_haplotype_file_prefix + ".hc.vcf.gz",config.param('gatk_genotype_gvcf', 'options'))
                ], name="merge_and_call_individual_gvcf.call." + sample.name))
            
        return jobs

    def combine_gvcf(self):
        """
        Combine the per sample gvcfs of haplotype caller into one main file for all sample.
        """
        jobs = []
        nb_haplotype_jobs = config.param('gatk_combine_gvcf', 'nb_haplotype', type='posint')
        nb_maxbatches_jobs = config.param('gatk_combine_gvcf', 'nb_batch', type='posint')

        # merge all sample in one shot
        if nb_maxbatches_jobs == 1 :
            if nb_haplotype_jobs == 1:
                jobs.append(concat_jobs([
                    Job(command="mkdir -p variants", samples=self.samples),
                    gatk4.combine_gvcf([ os.path.join("alignment", sample.name, sample.name)+".hc.g.vcf.gz" for sample in self.samples ], os.path.join("variants", "allSamples.hc.g.vcf.gz"))],
                    name="gatk_combine_gvcf.AllSamples"))
            else :
                unique_sequences_per_job,unique_sequences_per_job_others = split_by_size(self.sequence_dictionary_variant(), nb_haplotype_jobs - 1, variant=True)

                # Create one separate job for each of the first sequences
                for idx,sequences in enumerate(unique_sequences_per_job):
                    jobs.append(concat_jobs([
                        Job(command="mkdir -p variants", removable_files=[os.path.join("variants", "allSamples") + "." + str(idx) + ".hc.g.vcf.bgz",os.path.join("variants", "allSamples") + "." + str(idx) + ".hc.g.vcf.bgz.tbi"], samples=self.samples),
                        gatk.combine_gvcf([ os.path.join("alignment", sample.name, sample.name)+".hc.g.vcf.bgz" for sample in self.samples ], os.path.join("variants", "allSamples") + "." + str(idx) + ".hc.g.vcf.bgz", intervals=sequences)
                    ], name="gatk_combine_gvcf.AllSample" + "." + str(idx)))

                # Create one last job to process the last remaining sequences and 'others' sequences
                job=gatk4.combine_gvcf([ os.path.join("alignment", sample.name, sample.name)+".hc.g.vcf.gz" for sample in self.samples ], os.path.join("variants", "allSamples.others.hc.g.vcf.gz"), exclude_intervals=unique_sequences_per_job_others)
                job.name="gatk_combine_gvcf.AllSample" + ".others"
                job.removable_files=[os.path.join("variants", "allSamples.others.hc.g.vcf.gz"),os.path.join("variants", "allSamples.others.hc.g.vcf.gz.tbi") ]
                job.samples=self.samples
                jobs.append(job)
        else:
            #Combine samples by batch (pre-defined batches number in ini)
            sample_per_batch = int(math.ceil(len(self.samples)/float(nb_maxbatches_jobs)))
            batch_of_sample = [ self.samples[i:(i+sample_per_batch)] for i in range(0,len(self.samples),sample_per_batch) ]
            cpt = 0
            batches = []
            for batch in batch_of_sample :
                if nb_haplotype_jobs == 1:
                    jobs.append(concat_jobs([
                        Job(command="mkdir -p variants",removable_files=[os.path.join("variants", "allSamples.batch" + str(cpt) + ".hc.g.vcf.gz"),os.path.join("variants", "allSamples.batch" + str(cpt) + ".hc.g.vcf.gz.tbi")], samples=self.samples),
                        gatk4.combine_gvcf([ os.path.join("alignment", sample.name, sample.name)+".hc.g.vcf.gz" for sample in batch ], os.path.join("variants", "allSamples.batch" + str(cpt) + ".hc.g.vcf.gz"))
                    ], name="gatk_combine_gvcf.AllSamples.batch" + str(cpt)))
                else :
                    unique_sequences_per_job,unique_sequences_per_job_others = split_by_size(self.sequence_dictionary_variant(), nb_haplotype_jobs - 1, variant=True)

                    # Create one separate job for each of the first sequences
                    for idx,sequences in enumerate(unique_sequences_per_job):
                        jobs.append(concat_jobs([
                            Job(command="mkdir -p variants",removable_files=[os.path.join("variants", "allSamples") + ".batch" + str(cpt) + "." + str(idx) + ".hc.g.vcf.gz",os.path.join("variants", "allSamples") + ".batch" + str(cpt) + "." + str(idx) + ".hc.g.vcf.gz.tbi"], samples=self.samples),
                            gatk4.combine_gvcf([ os.path.join("alignment", sample.name, sample.name)+".hc.g.vcf.gz" for sample in batch ], os.path.join("variants", "allSamples") + ".batch" + str(cpt) + "." + str(idx) + ".hc.g.vcf.gz", intervals=sequences)
                        ], name="gatk_combine_gvcf.AllSample" + ".batch" + str(cpt) + "." + str(idx)))

                    # Create one last job to process the last remaining sequences and 'others' sequences
                    job=gatk4.combine_gvcf([ os.path.join("alignment", sample.name, sample.name)+".hc.g.vcf.gz" for sample in batch ], os.path.join("variants", "allSamples" + ".batch" + str(cpt) + ".others.hc.g.vcf.gz"), exclude_intervals=unique_sequences_per_job_others)
                    job.name="gatk_combine_gvcf.AllSample" + ".batch" + str(cpt) + ".others"
                    job.removable_files=[os.path.join("variants", "allSamples" + ".batch" + str(cpt) + ".others.hc.g.vcf.gz"),os.path.join("variants", "allSamples" + ".batch" + str(cpt) + ".others.hc.g.vcf.gz.tbi")]
                    job.samples = self.samples
                    jobs.append(job)
                batches.append("batch" + str(cpt))
                cpt = cpt + 1

            #Combine batches altogether
            if nb_haplotype_jobs == 1:
                job=gatk4.combine_gvcf([ os.path.join("variants", "allSamples." + batch_idx + ".hc.g.vcf.gz") for batch_idx in batches ], os.path.join("variants", "allSamples.hc.g.vcf.gz"))
                job.name="gatk_combine_gvcf.AllSamples.batches"
                job.samples = self.samples
                jobs.append(job)
            else :
                unique_sequences_per_job,unique_sequences_per_job_others = split_by_size(self.sequence_dictionary_variant(), nb_haplotype_jobs - 1, variant=True)

                # Create one separate job for each of the first sequences
                for idx,sequences in enumerate(unique_sequences_per_job):
                    job=gatk4.combine_gvcf([ os.path.join("variants", "allSamples." + batch_idx + "." + str(idx) + ".hc.g.vcf.gz") for batch_idx in batches ], os.path.join("variants", "allSamples") + "." + str(idx) + ".hc.g.vcf.gz", intervals=sequences)
                    job.name="gatk_combine_gvcf.AllSample" + "." + str(idx)
                    job.removable_files=[os.path.join("variants", "allSamples") + "." + str(idx) + ".hc.g.vcf.gz",os.path.join("variants", "allSamples") + "." + str(idx) + ".hc.g.vcf.gz.tbi"]
                    job.samples = self.samples
                    jobs.append(job)

                # Create one last job to process the last remaining sequences and 'others' sequences
                job=gatk4.combine_gvcf([ os.path.join("variants", "allSamples." + batch_idx + ".others.hc.g.vcf.gz") for batch_idx in batches ], os.path.join("variants", "allSamples" + ".others.hc.g.vcf.gz"), exclude_intervals=unique_sequences_per_job_others)
                job.name="gatk_combine_gvcf.AllSample" + ".others"
                job.removable_files=[os.path.join("variants", "allSamples" + ".others.hc.g.vcf.gz"),os.path.join("variants", "allSamples" + ".others.hc.g.vcf.gz.tbi")]
                job.samples = self.samples
                jobs.append(job)
                
        return jobs


    def merge_and_call_combined_gvcf(self):
        """
        Merges the combined gvcfs and also generates a general vcf containing genotypes.
        """

        jobs = []
        nb_haplotype_jobs = config.param('gatk_combine_gvcf', 'nb_haplotype', type='posint')

        haplotype_file_prefix = os.path.join("variants","allSamples")
        output_haplotype = os.path.join("variants", "allSamples.hc.g.vcf.gz")
        output_haplotype_genotyped = os.path.join("variants", "allSamples.hc.vcf.gz")
        if nb_haplotype_jobs > 1:
            unique_sequences_per_job,unique_sequences_per_job_others = split_by_size(self.sequence_dictionary_variant(), nb_haplotype_jobs - 1, variant=True)

            gvcfs_to_merge = [haplotype_file_prefix + "." + str(idx) + ".hc.g.vcf.gz" for idx in xrange(len(unique_sequences_per_job))]
            gvcfs_to_merge.append(haplotype_file_prefix + ".others.hc.g.vcf.gz")

            job = gatk4.cat_variants(gvcfs_to_merge, output_haplotype)
            job.name = "merge_and_call_combined_gvcf.merge.AllSample"
            job.samples = self.samples
            jobs.append(job)

        job = gatk4.genotype_gvcf([output_haplotype], output_haplotype_genotyped ,config.param('gatk_genotype_gvcf', 'options'))
        job.name = "merge_and_call_combined_gvcf.call.AllSample"
        job.samples = self.samples
        jobs.append(job)

        return jobs

    def variant_recalibrator(self):
        """
        GATK VariantRecalibrator.
        The purpose of the variant recalibrator is to assign a well-calibrated probability to each variant call in a call set.
        You can then create highly accurate call sets by filtering based on this single estimate for the accuracy of each call.
        The approach taken by variant quality score recalibration is to develop a continuous, covarying estimate of the relationship
        between SNP call annotations (QD, MQ, HaplotypeScore, and ReadPosRankSum, for example) and the probability that a SNP
        is a true genetic variant versus a sequencing or data processing artifact. This model is determined adaptively based
        on "true sites" provided as input, typically HapMap 3 sites and those sites found to be polymorphic on the Omni 2.5M SNP
        chip array. This adaptive error model can then be applied to both known and novel variation discovered in the call set
        of interest to evaluate the probability that each call is real. The score that gets added to the INFO field of each variant
        is called the VQSLOD. It is the log odds ratio of being a true variant versus being false under the trained Gaussian mixture model.
        Using the tranche file generated by the previous step the ApplyRecalibration walker looks at each variant's VQSLOD value
        and decides which tranche it falls in. Variants in tranches that fall below the specified truth sensitivity filter level
        have their filter field annotated with its tranche level. This will result in a call set that simultaneously is filtered
        to the desired level but also has the information necessary to pull out more variants for a higher sensitivity but a
        slightly lower quality level.
        """

        jobs = []

        #generate the recalibration tranche files
        output_directory = "variants"
        recal_snps_other_options = config.param('variant_recalibrator', 'tranch_other_options_snps')
        recal_indels_other_options = config.param('variant_recalibrator', 'tranch_other_options_indels')
        variant_recal_snps_prefix = os.path.join(output_directory, "allSamples.hc.snps")
        variant_recal_indels_prefix = os.path.join(output_directory, "allSamples.hc.indels")

        jobs.append(concat_jobs([
            Job(command="mkdir -p " + output_directory, samples=self.samples),
            gatk4.variant_recalibrator( [os.path.join(output_directory, "allSamples.hc.vcf.gz")], recal_snps_other_options, variant_recal_snps_prefix + ".recal", variant_recal_snps_prefix + ".tranches", variant_recal_snps_prefix + ".R"),
            gatk4.variant_recalibrator( [os.path.join(output_directory, "allSamples.hc.vcf.gz")], recal_indels_other_options, variant_recal_indels_prefix + ".recal", variant_recal_indels_prefix + ".tranches", variant_recal_indels_prefix + ".R")
        ], name="variant_recalibrator.tranch.allSamples"))


        #aply the recalibration
        apply_snps_other_options = config.param('variant_recalibrator', 'apply_other_options_snps')
        apply_indels_other_options = config.param('variant_recalibrator', 'apply_other_options_indels')
        variant_apply_snps_prefix = os.path.join(output_directory, "allSamples.hc.snps")
        variant_apply_indels_prefix = os.path.join(output_directory, "allSamples.hc.indels")

        jobs.append(concat_jobs([
            Job(command="mkdir -p " + output_directory, samples=self.samples),
            gatk4.apply_recalibration( os.path.join(output_directory, "allSamples.hc.vcf.gz"), variant_apply_snps_prefix + ".recal", variant_apply_snps_prefix + ".tranches", apply_snps_other_options, variant_apply_snps_prefix + "_raw_indels.vqsr.vcf.gz"),
            gatk4.apply_recalibration( variant_apply_snps_prefix + "_raw_indels.vqsr.vcf.gz", variant_apply_indels_prefix + ".recal", variant_apply_indels_prefix + ".tranches", apply_indels_other_options, os.path.join(output_directory, "allSamples.hc.vqsr.vcf"))
        ], name="variant_recalibrator.apply.allSamples"))

        return jobs


    def dna_sample_metrics(self):
        """
        Merge metrics. Read metrics per sample are merged at this step.
        """
        #get library type
        library = "SINGLE_END"
        for readset in self.readsets:
            if readset.run_type == "PAIRED_END" :
                library="PAIRED_END"


        trim_metrics_file = os.path.join("metrics", "trimSampleTable.tsv")
        metrics_file = os.path.join("metrics", "SampleMetrics.stats")
        report_metrics_file = os.path.join("report", "sequenceAlignmentTable.tsv")

        report_file = os.path.join("report", "DnaSeq.dna_sample_metrics.md")
        job = concat_jobs([
            Job(command="mkdir -p metrics", samples=readset.sample),
            metrics.dna_sample_metrics("alignment", metrics_file, library),
            Job(
                [metrics_file],
                [report_file],
                [['dna_sample_metrics', 'module_pandoc']],
                # Ugly awk to merge sample metrics with trim metrics if they exist; knitr may do this better
                command="""\
mkdir -p report && \\
if [[ -f {trim_metrics_file} ]]
then
  awk -F"\t" 'FNR==NR{{raw_reads[$1]=$2; surviving_reads[$1]=$3; surviving_pct[$1]=$4; next}}{{OFS="\t"; if ($2=="Mapped Reads"){{mapped_pct="Mapped %"}} else {{mapped_pct=($2 / surviving_reads[$1] * 100)}}; printf $1"\t"raw_reads[$1]"\t"surviving_reads[$1]"\t"surviving_pct[$1]"\t"$2"\t"mapped_pct; for (i = 3; i<= NF; i++) {{printf "\t"$i}}; print ""}}' \\
  {trim_metrics_file} \\
  {metrics_file} \\
  > {report_metrics_file}
else
  cp {metrics_file} {report_metrics_file}
fi && \\
sequence_alignment_table_md=`if [[ -f {trim_metrics_file} ]] ; then cut -f1-10 {report_metrics_file} | LC_NUMERIC=en_CA awk -F "\t" '{{OFS="|"; if (NR == 1) {{$1 = $1; print $0; print "-----|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----:|-----"}} else {{print $1, sprintf("%\\47d", $2), sprintf("%\\47d", $3), sprintf("%.1f", $4), sprintf("%\\47d", $5), sprintf("%.1f", $6), sprintf("%\\47d", $7), sprintf("%\\47d", $8), sprintf("%.1f", $9), $10}}}}' ; else cut -f1-6 {report_metrics_file} | LC_NUMERIC=en_CA awk -F "\t" '{{OFS="|"; if (NR == 1) {{$1 = $1; print $0; print "-----|-----:|-----:|-----:|-----:|-----"}} else {{print $1, sprintf("%\\47d", $2), sprintf("%\\47d", $3), sprintf("%\\47d", $4), sprintf("%.1f", $5), $6}}}}' ; fi`
pandoc \\
  {report_template_dir}/{basename_report_file} \\
  --template {report_template_dir}/{basename_report_file} \\
  --variable sequence_alignment_table="$sequence_alignment_table_md" \\
  --to markdown \\
  > {report_file}""".format(
                    report_template_dir=self.report_template_dir,
                    trim_metrics_file=trim_metrics_file,
                    metrics_file=metrics_file,
                    basename_report_file=os.path.basename(report_file),
                    report_metrics_file=report_metrics_file,
                    report_file=report_file
                ),
                report_files=[report_file]
            )
        ], name="dna_sample_metrics")
        job.input_files = [os.path.join("alignment", sample.name, sample.name + ".sorted.dup.metrics") for sample in self.samples]
        if library == "PAIRED_END" :
            job.input_files += [os.path.join("alignment", sample.name, sample.name + ".sorted.dup.recal.all.metrics.insert_size_metrics") for sample in self.samples]
        return [job]

    def rawmpileup(self):
        """
        Full pileup (optional). A raw mpileup file is created using samtools mpileup and compressed in gz format.
        One packaged mpileup file is created per sample/chromosome.
        """

        jobs = []
        for sample in self.samples:
            mpileup_directory = os.path.join("alignment", sample.name, "mpileup")

            for sequence in self.sequence_dictionary:
                if sequence['type'] is 'primary':
                    output = os.path.join(mpileup_directory, sample.name + "." + sequence['name'] + ".mpileup.gz")
                    jobs.append(concat_jobs([
                        Job(command="mkdir -p " + mpileup_directory, samples=[sample]),
                        pipe_jobs([
                            samtools.mpileup([os.path.join("alignment", sample.name, sample.name + ".sorted.dup.recal.bam")], None, config.param('rawmpileup', 'mpileup_other_options'), sequence['name']),
                            Job(output_files=[output], command="gzip -1 -c > " + output, samples=[sample])
                        ])
                    ], name="rawmpileup." + sample.name + "." + sequence['name']))

        return jobs

    def rawmpileup_cat(self):
        """
        Merge mpileup files per sample/chromosome into one compressed gzip file per sample.
        """

        jobs = []
        for sample in self.samples:
            mpileup_file_prefix = os.path.join("alignment", sample.name, "mpileup", sample.name + ".")
            mpileup_inputs = [mpileup_file_prefix + sequence['name'] + ".mpileup.gz" for sequence in self.sequence_dictionary if sequence['type'] is 'primary']

            gzip_output = mpileup_file_prefix + "mpileup.gz"
            job = Job(mpileup_inputs, [gzip_output])
            job.command = "zcat \\\n  " + " \\\n  ".join(mpileup_inputs) + " | \\\n  gzip -c --best > " + gzip_output
            job.name = "rawmpileup_cat." + sample.name
            job.samples = [sample]
            jobs.append(job)
        return jobs

    def snp_and_indel_bcf(self):
        """
        Mpileup and Variant calling. Variants (SNPs and INDELs) are called using
        [SAMtools](http://samtools.sourceforge.net/) mpileup. bcftools view is used to produce binary bcf files.
        """

        jobs = []
        input_bams = [os.path.join("alignment", sample.name, sample.name + ".sorted.dup.recal.bam") for sample in self.samples]
        nb_jobs = config.param('snp_and_indel_bcf', 'approximate_nb_jobs', type='posint')
        output_directory = "variants/rawBCF"

        if nb_jobs == 1:
            jobs.append(concat_jobs([
                Job(command="mkdir -p " + output_directory, samples=self.samples),
                pipe_jobs([
                    samtools.mpileup(input_bams, None, config.param('snp_and_indel_bcf', 'mpileup_other_options')),
                    samtools.bcftools_call("-", os.path.join(output_directory, "allSamples.bcf"), config.param('snp_and_indel_bcf', 'bcftools_other_options')),
                ])], name="snp_and_indel_bcf.allSamples"))

        else:
            for region in self.generate_approximate_windows(nb_jobs):
                jobs.append(concat_jobs([
                    Job(command="mkdir -p " + output_directory, samples=self.samples),
                    pipe_jobs([
                        samtools.mpileup(input_bams, None, config.param('snp_and_indel_bcf', 'mpileup_other_options'), region),
                        samtools.bcftools_call("-", os.path.join(output_directory, "allSamples." + region + ".bcf"), config.param('snp_and_indel_bcf', 'bcftools_other_options')),
                    ])], name="snp_and_indel_bcf.allSamples." + re.sub(":", "_", region)))

        return jobs

    def merge_filter_bcf(self):
        """
        bcftools is used to merge the raw binary variants files created in the snpAndIndelBCF step.
        The output of bcftools is fed to varfilter, which does an additional filtering of the variants
        and transforms the output into the VCF (.vcf) format. One vcf file contain the SNP/INDEL calls
        for all samples in the experiment.
        """

        jobs = []
        nb_jobs = config.param('snp_and_indel_bcf', 'approximate_nb_jobs', type='posint')

        if nb_jobs == 1:
            inputs = ["variants/rawBCF/allSamples.bcf"]
        else:
            inputs = ["variants/rawBCF/allSamples." + region + ".bcf" for region in self.generate_approximate_windows(nb_jobs)]
        output_file_prefix = "variants/allSamples.merged."

        bcf = output_file_prefix + "bcf"
        jobs.append(concat_jobs([
            Job(samples=self.samples),
            samtools.bcftools_cat(inputs, bcf),
            samtools.bcftools_view(bcf, output_file_prefix + "flt.vcf")
        ], name = "merge_filter_bcf"))

        return jobs

    def vt_decompose_and_normalize(self, input_vcf = "variants/allSamples.merged.flt.vcf", output_vcf = "variants/allSamples.merged.flt.vt.vcf.gz", job_name = "decompose_and_normalize"):
    
        jobs = []
        jobs.append(pipe_jobs([
            vt.decompose_and_normalize_mnps(input_vcf, None),
            htslib.bgzip_tabix(None, output_vcf),
        ],name=job_name))
        return jobs

    def haplotype_caller_decompose_and_normalize(self):
    
        input_vcf = self.select_input_files([["variants/allSamples.hc.vqsr.vcf"], ["variants/allSamples.hc.vcf.gz"]])
    
        job = self.vt_decompose_and_normalize(input_vcf, "variants/allSamples.hc.vqsr.vt.vcf.gz")
        return job


    def mpileup_decompose_and_normalize(self):
    
        input_vcf = self.select_input_files([["variants/allSamples.merged.flt.vcf"]])
    
        job = self.vt_decompose_and_normalize(input_vcf, "variants/allSamples.merged.flt.vt.vcf.gz")
        return job

    def filter_nstretches(self, input_vcf = "variants/allSamples.merged.flt.vcf", output_vcf = "variants/allSamples.merged.flt.NFiltered.vcf", job_name = "filter_nstretches" ):
        """
        The final .vcf files are filtered for long 'N' INDELs which are sometimes introduced and cause excessive
        memory usage by downstream tools.
        """

        job = tools.filter_long_indel(input_vcf, output_vcf)
        job.name = job_name
        job.samples = self.samples
        return [job]

    def haplotype_caller_filter_nstretches(self):
        """
        The final haplotype caller .vcf files are filtered for long 'N' INDELs which are sometimes introduced and cause excessive
        memory usage by downstream tools. !
        """

        # Find input vcf first from VSQR, then from non recalibrate hapotype calleroriginal BAMs in the readset sheet.
        hc_vcf = self.select_input_files([["variants/allSamples.hc.vqsr.vcf"],["variants/allSamples.hc.vcf.gz"]])

        job = self.filter_nstretches(hc_vcf[0], "variants/allSamples.hc.vqsr.NFiltered.vcf", "haplotype_caller_filter_nstretches")

        #job.samples = self.samples

        return job

    def mpileup_filter_nstretches(self):
        """
        The final mpileup .vcf files are filtered for long 'N' INDELs which are sometimes introduced and cause excessive
        memory usage by downstream tools.
        """

        job = self.filter_nstretches("variants/allSamples.merged.flt.vcf", "variants/allSamples.merged.flt.NFiltered.vcf", "mpileup_filter_nstretches")

        #job.samples = self.samples

        return job

    def flag_mappability(self, input_vcf = "variants/allSamples.merged.flt.vt.vcf", output_vcf = "variants/allSamples.merged.flt.vt.mil.vcf" ,job_name = "flag_mappability" ):
        """
        Mappability annotation. An in-house database identifies regions in which reads are confidently mapped
        to the reference genome.
        """
        jobs = []
        jobs.append(pipe_jobs([
            vcftools.annotate_mappability(input_vcf, None),
            htslib.bgzip_tabix(None, output_vcf),
        ], name=job_name))
        #job.samples = self.samples
        return jobs

    def haplotype_caller_flag_mappability(self) :
        """
        Mappability annotation applied to haplotype caller vcf.
        An in-house database identifies regions in which reads are confidently mapped
        to the reference genome.
        """

        job = self.flag_mappability("variants/allSamples.hc.vqsr.vt.vcf.gz", "variants/allSamples.hc.vqsr.vt.mil.vcf.gz", "haplotype_caller_flag_mappability" )
        #job.samples = self.samples

        return job

    def mpileup_flag_mappability(self) :
        """
        Mappability annotation applied to mpileup vcf.
        An in-house database identifies regions in which reads are confidently mapped
        to the reference genome.
        """

        job = self.flag_mappability("variants/allSamples.merged.flt.vt.vcf.gz", "variants/allSamples.merged.flt.vt.mil.vcf.gz", "mpileup_flag_mappability")
        #job.samples = self.samples

        return job

    def snp_id_annotation(self, input_vcf = "variants/allSamples.merged.flt.vt.mil.vcf.gz", output_vcf = "variants/allSamples.merged.flt.vt.mil.snpId.vcf.gz" , job_name = "snp_id_annotation"):
        """
        dbSNP annotation. The .vcf files are annotated for dbSNP using the software SnpSift (from the [SnpEff suite](http://snpeff.sourceforge.net/)).
        """
        jobs = []
        jobs.append(pipe_jobs([
            snpeff.snpsift_annotate(input_vcf, None),
            htslib.bgzip_tabix(None, output_vcf),
        ],name=job_name))
        #job.samples = self.samples
        return jobs

    def haplotype_caller_snp_id_annotation(self):
        """
        dbSNP annotation applied to haplotype caller vcf.
        The .vcf files are annotated for dbSNP using the software SnpSift (from the [SnpEff suite](http://snpeff.sourceforge.net/)).
        """

        job = self.snp_id_annotation("variants/allSamples.hc.vqsr.vt.mil.vcf.gz", "variants/allSamples.hc.vqsr.vt.mil.snpId.vcf.gz", "haplotype_caller_snp_id_annotation")
        #job.samples = self.samples

        return job

    def mpileup_snp_id_annotation(self):
        """
        dbSNP annotation applied to mpileyp vcf.
        The .vcf files are annotated for dbSNP using the software SnpSift (from the [SnpEff suite](http://snpeff.sourceforge.net/)).
        """

        job = self.snp_id_annotation("variants/allSamples.merged.flt.vt.mil.vcf.gz", "variants/allSamples.merged.flt.vt.mil.snpId.vcf.gz" , "mpileup_snp_id_annotation")
        #job.samples = self.samples

        return job

    def snp_effect(self, input_vcf = "variants/allSamples.merged.flt.vt.mil.snpId.vcf.gz", snpeff_file = "variants/allSamples.merged.flt.vt.mil.snpId.snpeff.vcf", job_name = "snp_effect"):
        """
        Variant effect annotation. The .vcf files are annotated for variant effects using the SnpEff software.
        SnpEff annotates and predicts the effects of variants on genes (such as amino acid changes).
        """
        report_file = "report/DnaSeq.snp_effect.md"
        jobs = []

        jobs.append(concat_jobs([
            snpeff.compute_effects(input_vcf, snpeff_file, options=config.param('compute_effects', 'options', required=False)),
            htslib.bgzip_tabix(snpeff_file, snpeff_file + ".gz"),
        ], name=job_name))
        #jobs.samples = self.samples

        return jobs

    def haplotype_caller_snp_effect(self):
        """
        Variant effect annotation applied to haplotype caller vcf.
        The .vcf files are annotated for variant effects using the SnpEff software.
        SnpEff annotates and predicts the effects of variants on genes (such as amino acid changes).
        """

        jobs = self.snp_effect("variants/allSamples.hc.vqsr.vt.mil.snpId.vcf.gz", "variants/allSamples.hc.vqsr.vt.mil.snpId.snpeff.vcf",  "haplotype_caller_snp_effect")
        #jobs.samples = self.samples

        return jobs

    def mpileup_snp_effect(self):
        """
        Variant effect annotation applied to mpileup vcf.
        The .vcf files are annotated for variant effects using the SnpEff software.
        SnpEff annotates and predicts the effects of variants on genes (such as amino acid changes).
        """
#        jobs = self.snp_effect("variants/allSamples.merged.flt.mil.snpId.vcf", "variants/allSamples.merged.flt.mil.snpId.snpeff.vcf",  "mpileup_snp_effect", options=config.param('compute_cancer_effects', 'options'))
        jobs = self.snp_effect("variants/allSamples.merged.flt.vt.mil.snpId.vcf.gz", "variants/allSamples.merged.flt.vt.mil.snpId.snpeff.vcf",  "mpileup_snp_effect")
        #jobs.samples = self.samples
            
        return jobs

    def dbnsfp_annotation(self, input_vcf = "variants/allSamples.merged.flt.vt.mil.snpId.snpeff.vcf.gz", output_vcf = "variants/allSamples.merged.flt.vt.mil.snpId.snpeff.dbnsfp.vcf", job_name = "dbnsfp_annotation"):
        """
        Additional SVN annotations. Provides extra information about SVN by using numerous published databases.
        Applicable to human samples. Databases available include Biomart (adds GO annotations based on gene information)
        and dbNSFP (an integrated database of functional annotations from multiple sources for the comprehensive
        collection of human non-synonymous SNPs. It compiles prediction scores from four prediction algorithms
        (SIFT, Polyphen2, LRT and MutationTaster), three conservation scores (PhyloP, GERP++ and SiPhy)
        and other function annotations).
        """

        jobs = []
        jobs.append(concat_jobs([
            snpeff.snpsift_dbnsfp(input_vcf, output_vcf),
            htslib.bgzip_tabix(output_vcf, output_vcf + ".gz"),
        ], name=job_name))
        #job.samples = self.samples
        
        return jobs

    def haplotype_caller_dbnsfp_annotation(self):
        """
        Additional SVN annotations applied to haplotype caller vcf.
        Provides extra information about SVN by using numerous published databases.
        Applicable to human samples. Databases available include Biomart (adds GO annotations based on gene information)
        and dbNSFP (an integrated database of functional annotations from multiple sources for the comprehensive
        collection of human non-synonymous SNPs. It compiles prediction scores from four prediction algorithms
        (SIFT, Polyphen2, LRT and MutationTaster), three conservation scores (PhyloP, GERP++ and SiPhy)
        and other function annotations).
        """

        job = self.dbnsfp_annotation("variants/allSamples.hc.vqsr.vt.mil.snpId.snpeff.vcf.gz", "variants/allSamples.hc.vqsr.vt.mil.snpId.snpeff.dbnsfp.vcf", "dbnsfp_annotation")
        #job.samples = self.samples

        return job

    def mpileup_dbnsfp_annotation(self):
        """
        Additional SVN annotations applied to mpileup vcf.
        Provides extra information about SVN by using numerous published databases.
        Applicable to human samples. Databases available include Biomart (adds GO annotations based on gene information)
        and dbNSFP (an integrated database of functional annotations from multiple sources for the comprehensive
        collection of human non-synonymous SNPs. It compiles prediction scores from four prediction algorithms
        (SIFT, Polyphen2, LRT and MutationTaster), three conservation scores (PhyloP, GERP++ and SiPhy)
        and other function annotations).
        """

        job = self.dbnsfp_annotation("variants/allSamples.merged.flt.vt.mil.snpId.snpeff.vcf.gz", "variants/allSamples.merged.flt.vt.mil.snpId.snpeff.dbnsfp.vcf.gz", "dbnsfp_annotation")
        #job.samples = self.samples

        return job

    def gemini_annotations(self, input="variants/allSamples.merged.flt.vt.mil.snpId.snpeff.dbnsfp.vcf.gz", output="variants/allSamples.gemini.db", temp_dir="config.param('DEFAULT', 'tmp_dir')", job_name="gemini_annotations"):
        """
        Load functionally annotated vcf file into a mysql lite annotation database : http://gemini.readthedocs.org/en/latest/index.html
        """

        job = gemini.gemini_annotations(input, output, temp_dir)
        job.name=job_name
        
        return job

    def haplotype_caller_gemini_annotations(self):
        
        tmp_dir = config.param('DEFAULT', 'tmp_dir')
        job = self.gemini_annotations("variants/allSamples.hc.vqsr.vt.mil.snpId.snpeff.dbnsfp.vcf.gz", "variants/allSamples.gemini.db", temp_dir=tmp_dir, job_name="gemini_annotations"),
        
        return job

    def mpileup_gemini_annotations(self):
    
        tmp_dir = config.param('DEFAULT', 'tmp_dir')
        job = self.gemini_annotations("variants/allSamples.merged.flt.vt.mil.snpId.snpeff.dbnsfp.vcf.gz", "variants/allSamples.gemini.db", temp_dir=tmp_dir, job_name="gemini_annotations"),
    
        return job


    def metrics_vcf_stats(self, variants_file_prefix = "variants/allSamples.hc.vqsr.vt.mil.snpId.snpeff.dbnsfp" , job_name = "metrics_change_rate"):
        """
        Metrics SNV. Multiple metrics associated to annotations and effect prediction are generated at this step:
        change rate by chromosome, changes by type, effects by impact, effects by functional class, counts by effect,
        counts by genomic region, SNV quality, coverage, InDel lengths, base changes,  transition-transversion rates,
        summary of allele frequencies, codon changes, amino acid changes, changes per chromosome, change rates.
        """


        job = metrics.vcf_stats(variants_file_prefix + ".vcf.gz", variants_file_prefix + ".snpeff.vcf.part_changeRate.tsv", variants_file_prefix + ".snpeff.vcf.statsFile.txt")
        job.name = job_name
        #job.samples = self.samples
        return [job]


    def haplotype_caller_metrics_vcf_stats(self):
        """
        Metrics SNV applied to haplotype caller vcf.
        Multiple metrics associated to annotations and effect prediction are generated at this step:
        change rate by chromosome, changes by type, effects by impact, effects by functional class, counts by effect,
        counts by genomic region, SNV quality, coverage, InDel lengths, base changes,  transition-transversion rates,
        summary of allele frequencies, codon changes, amino acid changes, changes per chromosome, change rates.
        """

        job = self.metrics_vcf_stats("variants/allSamples.hc.vqsr.vt.mil.snpId.snpeff.dbnsfp",  "haplotype_caller_metrics_change_rate")
        #job.samples = self.samples

        return job


    def mpileup_metrics_vcf_stats(self):
        """
        Metrics SNV applied to mpileup caller vcf.
        Multiple metrics associated to annotations and effect prediction are generated at this step:
        change rate by chromosome, changes by type, effects by impact, effects by functional class, counts by effect,
        counts by genomic region, SNV quality, coverage, InDel lengths, base changes,  transition-transversion rates,
        summary of allele frequencies, codon changes, amino acid changes, changes per chromosome, change rates.
        """

        job = self.metrics_vcf_stats("variants/allSamples.merged.flt.vt.mil.snpId.snpeff.dbnsfp" , "mpileup_metrics_change_rate")
        #job.samples = self.samples

        return job



    def metrics_snv_graph_metrics(self, variants_file_prefix = "variants/allSamples.merged.flt.mil.snpId", snv_metrics_prefix = "metrics/allSamples.SNV",  job_name = "metrics_snv_graph"):
        """
        """

        report_file = "report/DnaSeq.metrics_snv_graph_metrics.md"
        snv_metrics_files = [snv_metrics_prefix + ".SummaryTable.tsv", snv_metrics_prefix + ".EffectsFunctionalClass.tsv", snv_metrics_prefix + ".EffectsImpact.tsv"]

        job = metrics.snv_graph_metrics(variants_file_prefix + ".snpeff.vcf.statsFile.txt", snv_metrics_prefix)
        job.output_files = snv_metrics_files
        job.name = job_name
        #job.samples = self.samples

        return [concat_jobs([
            job,
            Job(
                snv_metrics_files,
                [report_file],
                [[job_name + "_report", 'module_pandoc']],
                command="""\
mkdir -p report && \\
paste \\
  <(echo -e "Number of variants before filter\nNumber of not variants\n%\nNumber of variants processed\nNumber of known variants\n%\nTransitions\nTransversions\nTs Tv ratio\nmissense\nnonsense\nsilent\nmissense silent ratio\nhigh impact\nlow impact\nmoderate impact\nmodifier impact") \\
  <(paste \\
    {snv_metrics_prefix}.SummaryTable.tsv \\
    {snv_metrics_prefix}.EffectsFunctionalClass.tsv \\
    <(sed '1d' {snv_metrics_prefix}.EffectsImpact.tsv) \\
  | sed '1d' | sed 's/\t/\\n/g') \\
  > report/SNV.SummaryTable.tsv
snv_summary_table_md=`sed 's/\t/|/g' report/SNV.SummaryTable.tsv`
pandoc \\
  {report_template_dir}/{basename_report_file} \\
  --template {report_template_dir}/{basename_report_file} \\
  --variable snv_summary_table="$snv_summary_table_md" \\
  --to markdown \\
  > {report_file}
for file in SNVQuality  IndelLength CountRegions CountEffects BaseChange codonChange AminoAcidChange changeRate TsTv
do
  for ext in jpeg pdf tsv
  do
  cp \\
    {snv_metrics_prefix}.$file.$ext  \\
    report/SNV.$file.$ext
  done
done
cp {snv_metrics_prefix}.chromosomeChange.zip report/SNV.chromosomeChange.zip""".format(
                    report_template_dir=self.report_template_dir,
                    basename_report_file=os.path.basename(report_file),
                    snv_metrics_prefix=snv_metrics_prefix,
                    report_file=report_file
                ),
                report_files=[report_file]
            )
        ], name=job_name + "_report")]

    def haplotype_caller_metrics_snv_graph_metrics(self):
        """
        See general metrics_vcf_stats !  Applied to haplotype caller vcf
        """

        jobs = self.metrics_snv_graph_metrics("variants/allSamples.hc.vqsr.mil.snpId", "metrics/allSamples.hc.vqsr.SNV", "haplotype_caller_metrics_snv_graph")
        #jobs.samples = self.samples

        return jobs


    def mpileup_metrics_snv_graph_metrics(self):
        """
        See general metrics_vcf_stats !  Applied to mpileup vcf
        """

        jobs = self.metrics_snv_graph_metrics("variants/allSamples.merged.flt.mil.snpId", "metrics/allSamples.mpileup.SNV", "mpileup_metrics_snv_graph")
        #jobs.samples = self.samples

        return jobs


    @property
    def steps(self):
        return [
            [
                self.picard_sam_to_fastq,
                self.sym_link_fastq,
                self.trimmomatic,
                self.merge_trimmomatic_stats,
                self.skewer_trimming,
                self.bwa_mem_picard_sort_sam,
                self.sambamba_merge_sam_files,
                self.gatk_indel_realigner,
                self.sambamba_merge_realigned,
                self.fix_mate_by_coordinate,
                self.picard_mark_duplicates,
                self.recalibration,
                self.sym_link_final_bam,
                self.metrics_dna_picard_metrics,
                self.metrics_dna_sample_qualimap,
                self.metrics_dna_sambamba_flagstat,
                self.metrics_dna_fastqc,
                self.picard_calculate_hs_metrics,
                self.gatk_callable_loci,
                self.extract_common_snp_freq,
                self.baf_plot,
                self.gatk_haplotype_caller,
                self.merge_and_call_individual_gvcf,
                self.combine_gvcf,
                self.merge_and_call_combined_gvcf,
                self.variant_recalibrator,
                #self.haplotype_caller_filter_nstretches,
                self.haplotype_caller_decompose_and_normalize,
                self.haplotype_caller_flag_mappability,
                self.haplotype_caller_snp_id_annotation,
                self.haplotype_caller_snp_effect,
                self.haplotype_caller_dbnsfp_annotation,
                self.haplotype_caller_gemini_annotations,
                self.haplotype_caller_metrics_vcf_stats,
                #self.haplotype_caller_metrics_snv_graph_metrics,
                self.run_multiqc,
            ],
            [
                self.picard_sam_to_fastq,
                self.sym_link_fastq,
                self.trimmomatic,
                self.merge_trimmomatic_stats,
                self.skewer_trimming,
                self.bwa_mem_picard_sort_sam,
                self.sambamba_merge_sam_files,
                self.gatk_indel_realigner,
                self.sambamba_merge_realigned,
                self.fix_mate_by_coordinate,
                self.picard_mark_duplicates,
                self.recalibration,
                self.sym_link_final_bam,
                self.metrics_dna_picard_metrics,
                self.metrics_dna_sample_qualimap,
                self.metrics_dna_sambamba_flagstat,
                self.metrics_dna_fastqc,
                self.picard_calculate_hs_metrics,
                self.gatk_callable_loci,
                self.extract_common_snp_freq,
                self.baf_plot,
                self.rawmpileup,
                self.rawmpileup_cat,
                self.snp_and_indel_bcf,
                self.merge_filter_bcf,
                #self.mpileup_filter_nstretches,
                self.mpileup_decompose_and_normalize,
                self.mpileup_flag_mappability,
                self.mpileup_snp_id_annotation,
                self.mpileup_snp_effect,
                self.mpileup_dbnsfp_annotation,
                self.mpileup_gemini_annotations,
                self.mpileup_metrics_vcf_stats,
                #self.mpileup_metrics_snv_graph_metrics,
                self.run_multiqc
            ],
            [
                self.picard_sam_to_fastq,
                self.skewer_trimming,
                self.bwa_mem_picard_sort_sam,
                self.sambamba_merge_sam_files,
                self.gatk_indel_realigner,
                self.sambamba_merge_realigned,
                self.sambamba_mark_duplicates,
                self.metrics_dna_picard_metrics,
                self.metrics_dna_sample_qualimap,
                self.metrics_dna_sambamba_flagstat,
                self.metrics_dna_fastqc,
                self.picard_calculate_hs_metrics,
                self.gatk_callable_loci,
                self.extract_common_snp_freq,
                self.baf_plot,
                self.gatk_haplotype_caller,
                self.merge_and_call_individual_gvcf,
                self.combine_gvcf,
                self.merge_and_call_combined_gvcf,
                self.variant_recalibrator,
                self.haplotype_caller_decompose_and_normalize,
                self.haplotype_caller_flag_mappability,
                self.haplotype_caller_snp_id_annotation,
                self.haplotype_caller_snp_effect,
                self.haplotype_caller_dbnsfp_annotation,
                self.haplotype_caller_gemini_annotations,
                self.run_multiqc,
            ]
        ]

class DnaSeq(DnaSeqRaw):
    def __init__(self, protocol=None):
        self._protocol = protocol
        # Add pipeline specific arguments
        self.argparser.add_argument("-t", "--type", help="DNAseq analysis type", choices=["mugqic", "mpileup", "light"], default="mugqic")
        super(DnaSeq, self).__init__(protocol)

if __name__ == '__main__':
    DnaSeq(protocol=['mugqic', 'mpileup'])
