#compdef genpipes

# AUTOMATICALLY GENERATED by `shtab`


_shtab_genpipes_commands() {
  local _commands=(
    "ampliconseq:Version\: 5.0.1-beta"
    "chipseq:Version\: 5.0.1-beta"
    "covseq:Version\: 5.0.1-beta"
    "dnaseq:Version\: 5.0.1-beta"
    "methylseq:Version\: 5.0.1-beta"
    "nanopore:Version\: 5.0.1-beta"
    "nanopore_covseq:Version\: 5.0.1-beta"
    "rnaseq:Version\: 5.0.1-beta"
    "rnaseq_denovo_assembly:Version\: 5.0.1-beta"
    "rnaseq_light:Version\: 5.0.1-beta"
  )
  _describe 'genpipes commands' _commands
}

_shtab_genpipes_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "(- : *)"{-v,--version}"[show program\'s version number and exit]"
)

_shtab_genpipes_ampliconseq_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--clean[create \'rm\' commands for all job removable files in the given step range, if they exist\; if --clean is set, --job-scheduler, --force options and job up-to-date status are ignored (default\: false)]"
  {-c,--config}"[config INI-style list of files\; config parameters are overwritten based on files order]:config:"
  "--container[Run inside a container providing a valid singularity image path]:container:"
  {-f,--force}"[force creation of jobs even if up to date (default\: false)]"
  "--force_mem_per_cpu[Take the mem input in the ini file and force to have a minimum of mem_per_cpu by correcting the number of cpu (default\: None)]:force_mem_per_cpu:"
  {--genpipes_file,-g}"[Command file output path. This is the command used to process the data, or said otherwise, this command will \"run the Genpipes pipeline\". Will be redirected to stdout if the option is not provided.]:genpipes_file:"
  {-j,--job-scheduler}"[job scheduler type (default\: slurm)]:job_scheduler:(pbs batch daemon slurm)"
  "--json-pt[create JSON file for project_tracking database ingestion (default\: false i.e. JSON file will NOT be created)]"
  {-l,--log}"[log level (default\: info)]:log:(debug info warning error critical)"
  "--no-json[do not create JSON file per analysed sample to track the analysis status (default\: false i.e. JSON file will be created)]"
  {-o,--output-dir}"[output directory (default\: current)]:output_dir:"
  "--sanity-check[run the pipeline in \`sanity check mode\` to verify that all the input files needed for the pipeline to run are available on the system (default\: false)]"
  {-s,--steps}"[step range e.g. \'1-5\', \'3,6,7\', \'2,4-8\']:steps:"
  "--wrap[Path to the genpipe cvmfs wrapper script.
Default is genpipes\/ressources\/container\/bin\/container_wrapper.sh. This is a convenience options for using genpipes in a container]:wrap:"
  {-r,--readsets}"[readset file]:readsets_file:"
  {-d,--design}"[design file]:design_file:"
  "(- : *)"{-v,--version}"[show the version information and exit]"
)

_shtab_genpipes_chipseq_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--clean[create \'rm\' commands for all job removable files in the given step range, if they exist\; if --clean is set, --job-scheduler, --force options and job up-to-date status are ignored (default\: false)]"
  {-c,--config}"[config INI-style list of files\; config parameters are overwritten based on files order]:config:"
  "--container[Run inside a container providing a valid singularity image path]:container:"
  {-f,--force}"[force creation of jobs even if up to date (default\: false)]"
  "--force_mem_per_cpu[Take the mem input in the ini file and force to have a minimum of mem_per_cpu by correcting the number of cpu (default\: None)]:force_mem_per_cpu:"
  {--genpipes_file,-g}"[Command file output path. This is the command used to process the data, or said otherwise, this command will \"run the Genpipes pipeline\". Will be redirected to stdout if the option is not provided.]:genpipes_file:"
  {-j,--job-scheduler}"[job scheduler type (default\: slurm)]:job_scheduler:(pbs batch daemon slurm)"
  "--json-pt[create JSON file for project_tracking database ingestion (default\: false i.e. JSON file will NOT be created)]"
  {-l,--log}"[log level (default\: info)]:log:(debug info warning error critical)"
  "--no-json[do not create JSON file per analysed sample to track the analysis status (default\: false i.e. JSON file will be created)]"
  {-o,--output-dir}"[output directory (default\: current)]:output_dir:"
  "--sanity-check[run the pipeline in \`sanity check mode\` to verify that all the input files needed for the pipeline to run are available on the system (default\: false)]"
  {-s,--steps}"[step range e.g. \'1-5\', \'3,6,7\', \'2,4-8\']:steps:"
  "--wrap[Path to the genpipe cvmfs wrapper script.
Default is genpipes\/ressources\/container\/bin\/container_wrapper.sh. This is a convenience options for using genpipes in a container]:wrap:"
  {-r,--readsets}"[readset file]:readsets_file:"
  {-d,--design}"[design file]:design_file:"
  "(- : *)"{-v,--version}"[show the version information and exit]"
  {-t,--type}"[Type of pipeline (default chipseq)]:protocol:(chipseq atacseq)"
)

_shtab_genpipes_covseq_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--clean[create \'rm\' commands for all job removable files in the given step range, if they exist\; if --clean is set, --job-scheduler, --force options and job up-to-date status are ignored (default\: false)]"
  {-c,--config}"[config INI-style list of files\; config parameters are overwritten based on files order]:config:"
  "--container[Run inside a container providing a valid singularity image path]:container:"
  {-f,--force}"[force creation of jobs even if up to date (default\: false)]"
  "--force_mem_per_cpu[Take the mem input in the ini file and force to have a minimum of mem_per_cpu by correcting the number of cpu (default\: None)]:force_mem_per_cpu:"
  {--genpipes_file,-g}"[Command file output path. This is the command used to process the data, or said otherwise, this command will \"run the Genpipes pipeline\". Will be redirected to stdout if the option is not provided.]:genpipes_file:"
  {-j,--job-scheduler}"[job scheduler type (default\: slurm)]:job_scheduler:(pbs batch daemon slurm)"
  "--json-pt[create JSON file for project_tracking database ingestion (default\: false i.e. JSON file will NOT be created)]"
  {-l,--log}"[log level (default\: info)]:log:(debug info warning error critical)"
  "--no-json[do not create JSON file per analysed sample to track the analysis status (default\: false i.e. JSON file will be created)]"
  {-o,--output-dir}"[output directory (default\: current)]:output_dir:"
  "--sanity-check[run the pipeline in \`sanity check mode\` to verify that all the input files needed for the pipeline to run are available on the system (default\: false)]"
  {-s,--steps}"[step range e.g. \'1-5\', \'3,6,7\', \'2,4-8\']:steps:"
  "--wrap[Path to the genpipe cvmfs wrapper script.
Default is genpipes\/ressources\/container\/bin\/container_wrapper.sh. This is a convenience options for using genpipes in a container]:wrap:"
  {-r,--readsets}"[readset file]:readsets_file:"
  {-d,--design}"[design file]:design_file:"
  "(- : *)"{-v,--version}"[show the version information and exit]"
)

_shtab_genpipes_dnaseq_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--clean[create \'rm\' commands for all job removable files in the given step range, if they exist\; if --clean is set, --job-scheduler, --force options and job up-to-date status are ignored (default\: false)]"
  {-c,--config}"[config INI-style list of files\; config parameters are overwritten based on files order]:config:"
  "--container[Run inside a container providing a valid singularity image path]:container:"
  {-f,--force}"[force creation of jobs even if up to date (default\: false)]"
  "--force_mem_per_cpu[Take the mem input in the ini file and force to have a minimum of mem_per_cpu by correcting the number of cpu (default\: None)]:force_mem_per_cpu:"
  {--genpipes_file,-g}"[Command file output path. This is the command used to process the data, or said otherwise, this command will \"run the Genpipes pipeline\". Will be redirected to stdout if the option is not provided.]:genpipes_file:"
  {-j,--job-scheduler}"[job scheduler type (default\: slurm)]:job_scheduler:(pbs batch daemon slurm)"
  "--json-pt[create JSON file for project_tracking database ingestion (default\: false i.e. JSON file will NOT be created)]"
  {-l,--log}"[log level (default\: info)]:log:(debug info warning error critical)"
  "--no-json[do not create JSON file per analysed sample to track the analysis status (default\: false i.e. JSON file will be created)]"
  {-o,--output-dir}"[output directory (default\: current)]:output_dir:"
  "--sanity-check[run the pipeline in \`sanity check mode\` to verify that all the input files needed for the pipeline to run are available on the system (default\: false)]"
  {-s,--steps}"[step range e.g. \'1-5\', \'3,6,7\', \'2,4-8\']:steps:"
  "--wrap[Path to the genpipe cvmfs wrapper script.
Default is genpipes\/ressources\/container\/bin\/container_wrapper.sh. This is a convenience options for using genpipes in a container]:wrap:"
  {-r,--readsets}"[readset file]:readsets_file:"
  {-d,--design}"[design file]:design_file:"
  "(- : *)"{-v,--version}"[show the version information and exit]"
  {-p,--pairs}"[pairs file]:pairs:"
  "--profyle[adjust deliverables to PROFYLE folder conventions (Default\: False)]"
  {-t,--type}"[DNAseq analysis type]:protocol:(germline_snv germline_sv germline_high_cov somatic_tumor_only somatic_fastpass somatic_ensemble somatic_sv)"
)

_shtab_genpipes_methylseq_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--clean[create \'rm\' commands for all job removable files in the given step range, if they exist\; if --clean is set, --job-scheduler, --force options and job up-to-date status are ignored (default\: false)]"
  {-c,--config}"[config INI-style list of files\; config parameters are overwritten based on files order]:config:"
  "--container[Run inside a container providing a valid singularity image path]:container:"
  {-f,--force}"[force creation of jobs even if up to date (default\: false)]"
  "--force_mem_per_cpu[Take the mem input in the ini file and force to have a minimum of mem_per_cpu by correcting the number of cpu (default\: None)]:force_mem_per_cpu:"
  {--genpipes_file,-g}"[Command file output path. This is the command used to process the data, or said otherwise, this command will \"run the Genpipes pipeline\". Will be redirected to stdout if the option is not provided.]:genpipes_file:"
  {-j,--job-scheduler}"[job scheduler type (default\: slurm)]:job_scheduler:(pbs batch daemon slurm)"
  "--json-pt[create JSON file for project_tracking database ingestion (default\: false i.e. JSON file will NOT be created)]"
  {-l,--log}"[log level (default\: info)]:log:(debug info warning error critical)"
  "--no-json[do not create JSON file per analysed sample to track the analysis status (default\: false i.e. JSON file will be created)]"
  {-o,--output-dir}"[output directory (default\: current)]:output_dir:"
  "--sanity-check[run the pipeline in \`sanity check mode\` to verify that all the input files needed for the pipeline to run are available on the system (default\: false)]"
  {-s,--steps}"[step range e.g. \'1-5\', \'3,6,7\', \'2,4-8\']:steps:"
  "--wrap[Path to the genpipe cvmfs wrapper script.
Default is genpipes\/ressources\/container\/bin\/container_wrapper.sh. This is a convenience options for using genpipes in a container]:wrap:"
  {-r,--readsets}"[readset file]:readsets_file:"
  {-d,--design}"[design file]:design_file:"
  "(- : *)"{-v,--version}"[show the version information and exit]"
  {-t,--type}"[Type of pipeline (default chipseq)]:protocol:(bismark gembs hybrid dragen)"
)

_shtab_genpipes_nanopore_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--clean[create \'rm\' commands for all job removable files in the given step range, if they exist\; if --clean is set, --job-scheduler, --force options and job up-to-date status are ignored (default\: false)]"
  {-c,--config}"[config INI-style list of files\; config parameters are overwritten based on files order]:config:"
  "--container[Run inside a container providing a valid singularity image path]:container:"
  {-f,--force}"[force creation of jobs even if up to date (default\: false)]"
  "--force_mem_per_cpu[Take the mem input in the ini file and force to have a minimum of mem_per_cpu by correcting the number of cpu (default\: None)]:force_mem_per_cpu:"
  {--genpipes_file,-g}"[Command file output path. This is the command used to process the data, or said otherwise, this command will \"run the Genpipes pipeline\". Will be redirected to stdout if the option is not provided.]:genpipes_file:"
  {-j,--job-scheduler}"[job scheduler type (default\: slurm)]:job_scheduler:(pbs batch daemon slurm)"
  "--json-pt[create JSON file for project_tracking database ingestion (default\: false i.e. JSON file will NOT be created)]"
  {-l,--log}"[log level (default\: info)]:log:(debug info warning error critical)"
  "--no-json[do not create JSON file per analysed sample to track the analysis status (default\: false i.e. JSON file will be created)]"
  {-o,--output-dir}"[output directory (default\: current)]:output_dir:"
  "--sanity-check[run the pipeline in \`sanity check mode\` to verify that all the input files needed for the pipeline to run are available on the system (default\: false)]"
  {-s,--steps}"[step range e.g. \'1-5\', \'3,6,7\', \'2,4-8\']:steps:"
  "--wrap[Path to the genpipe cvmfs wrapper script.
Default is genpipes\/ressources\/container\/bin\/container_wrapper.sh. This is a convenience options for using genpipes in a container]:wrap:"
  {-r,--readsets}"[readset file]:readsets_file:"
  {-d,--design}"[design file]:design_file:"
  "(- : *)"{-v,--version}"[show the version information and exit]"
)

_shtab_genpipes_nanopore_covseq_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--clean[create \'rm\' commands for all job removable files in the given step range, if they exist\; if --clean is set, --job-scheduler, --force options and job up-to-date status are ignored (default\: false)]"
  {-c,--config}"[config INI-style list of files\; config parameters are overwritten based on files order]:config:"
  "--container[Run inside a container providing a valid singularity image path]:container:"
  {-f,--force}"[force creation of jobs even if up to date (default\: false)]"
  "--force_mem_per_cpu[Take the mem input in the ini file and force to have a minimum of mem_per_cpu by correcting the number of cpu (default\: None)]:force_mem_per_cpu:"
  {--genpipes_file,-g}"[Command file output path. This is the command used to process the data, or said otherwise, this command will \"run the Genpipes pipeline\". Will be redirected to stdout if the option is not provided.]:genpipes_file:"
  {-j,--job-scheduler}"[job scheduler type (default\: slurm)]:job_scheduler:(pbs batch daemon slurm)"
  "--json-pt[create JSON file for project_tracking database ingestion (default\: false i.e. JSON file will NOT be created)]"
  {-l,--log}"[log level (default\: info)]:log:(debug info warning error critical)"
  "--no-json[do not create JSON file per analysed sample to track the analysis status (default\: false i.e. JSON file will be created)]"
  {-o,--output-dir}"[output directory (default\: current)]:output_dir:"
  "--sanity-check[run the pipeline in \`sanity check mode\` to verify that all the input files needed for the pipeline to run are available on the system (default\: false)]"
  {-s,--steps}"[step range e.g. \'1-5\', \'3,6,7\', \'2,4-8\']:steps:"
  "--wrap[Path to the genpipe cvmfs wrapper script.
Default is genpipes\/ressources\/container\/bin\/container_wrapper.sh. This is a convenience options for using genpipes in a container]:wrap:"
  {-r,--readsets}"[readset file]:readsets_file:"
  {-d,--design}"[design file]:design_file:"
  "(- : *)"{-v,--version}"[show the version information and exit]"
  {-t,--type}"[Type of CoVSeQ analysis,basecalling on\/off (default without basecalling)]:protocol:(default basecalling)"
)

_shtab_genpipes_rnaseq_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--clean[create \'rm\' commands for all job removable files in the given step range, if they exist\; if --clean is set, --job-scheduler, --force options and job up-to-date status are ignored (default\: false)]"
  {-c,--config}"[config INI-style list of files\; config parameters are overwritten based on files order]:config:"
  "--container[Run inside a container providing a valid singularity image path]:container:"
  {-f,--force}"[force creation of jobs even if up to date (default\: false)]"
  "--force_mem_per_cpu[Take the mem input in the ini file and force to have a minimum of mem_per_cpu by correcting the number of cpu (default\: None)]:force_mem_per_cpu:"
  {--genpipes_file,-g}"[Command file output path. This is the command used to process the data, or said otherwise, this command will \"run the Genpipes pipeline\". Will be redirected to stdout if the option is not provided.]:genpipes_file:"
  {-j,--job-scheduler}"[job scheduler type (default\: slurm)]:job_scheduler:(pbs batch daemon slurm)"
  "--json-pt[create JSON file for project_tracking database ingestion (default\: false i.e. JSON file will NOT be created)]"
  {-l,--log}"[log level (default\: info)]:log:(debug info warning error critical)"
  "--no-json[do not create JSON file per analysed sample to track the analysis status (default\: false i.e. JSON file will be created)]"
  {-o,--output-dir}"[output directory (default\: current)]:output_dir:"
  "--sanity-check[run the pipeline in \`sanity check mode\` to verify that all the input files needed for the pipeline to run are available on the system (default\: false)]"
  {-s,--steps}"[step range e.g. \'1-5\', \'3,6,7\', \'2,4-8\']:steps:"
  "--wrap[Path to the genpipe cvmfs wrapper script.
Default is genpipes\/ressources\/container\/bin\/container_wrapper.sh. This is a convenience options for using genpipes in a container]:wrap:"
  {-r,--readsets}"[readset file]:readsets_file:"
  {-d,--design}"[design file]:design_file:"
  "(- : *)"{-v,--version}"[show the version information and exit]"
  {-t,--type}"[RNAseq analysis type]:protocol:(stringtie variants cancer)"
  {-b,--batch}"[batch file (to peform batch effect correction]:batch:"
)

_shtab_genpipes_rnaseq_denovo_assembly_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--clean[create \'rm\' commands for all job removable files in the given step range, if they exist\; if --clean is set, --job-scheduler, --force options and job up-to-date status are ignored (default\: false)]"
  {-c,--config}"[config INI-style list of files\; config parameters are overwritten based on files order]:config:"
  "--container[Run inside a container providing a valid singularity image path]:container:"
  {-f,--force}"[force creation of jobs even if up to date (default\: false)]"
  "--force_mem_per_cpu[Take the mem input in the ini file and force to have a minimum of mem_per_cpu by correcting the number of cpu (default\: None)]:force_mem_per_cpu:"
  {--genpipes_file,-g}"[Command file output path. This is the command used to process the data, or said otherwise, this command will \"run the Genpipes pipeline\". Will be redirected to stdout if the option is not provided.]:genpipes_file:"
  {-j,--job-scheduler}"[job scheduler type (default\: slurm)]:job_scheduler:(pbs batch daemon slurm)"
  "--json-pt[create JSON file for project_tracking database ingestion (default\: false i.e. JSON file will NOT be created)]"
  {-l,--log}"[log level (default\: info)]:log:(debug info warning error critical)"
  "--no-json[do not create JSON file per analysed sample to track the analysis status (default\: false i.e. JSON file will be created)]"
  {-o,--output-dir}"[output directory (default\: current)]:output_dir:"
  "--sanity-check[run the pipeline in \`sanity check mode\` to verify that all the input files needed for the pipeline to run are available on the system (default\: false)]"
  {-s,--steps}"[step range e.g. \'1-5\', \'3,6,7\', \'2,4-8\']:steps:"
  "--wrap[Path to the genpipe cvmfs wrapper script.
Default is genpipes\/ressources\/container\/bin\/container_wrapper.sh. This is a convenience options for using genpipes in a container]:wrap:"
  {-r,--readsets}"[readset file]:readsets_file:"
  {-d,--design}"[design file]:design_file:"
  "(- : *)"{-v,--version}"[show the version information and exit]"
  {-t,--type}"[RNAseq analysis type]:protocol:(trinity seq2fun)"
  {-b,--batch}"[batch file (to peform batch effect correction]:batch:"
)

_shtab_genpipes_rnaseq_light_options=(
  "(- : *)"{-h,--help}"[show this help message and exit]"
  "--clean[create \'rm\' commands for all job removable files in the given step range, if they exist\; if --clean is set, --job-scheduler, --force options and job up-to-date status are ignored (default\: false)]"
  {-c,--config}"[config INI-style list of files\; config parameters are overwritten based on files order]:config:"
  "--container[Run inside a container providing a valid singularity image path]:container:"
  {-f,--force}"[force creation of jobs even if up to date (default\: false)]"
  "--force_mem_per_cpu[Take the mem input in the ini file and force to have a minimum of mem_per_cpu by correcting the number of cpu (default\: None)]:force_mem_per_cpu:"
  {--genpipes_file,-g}"[Command file output path. This is the command used to process the data, or said otherwise, this command will \"run the Genpipes pipeline\". Will be redirected to stdout if the option is not provided.]:genpipes_file:"
  {-j,--job-scheduler}"[job scheduler type (default\: slurm)]:job_scheduler:(pbs batch daemon slurm)"
  "--json-pt[create JSON file for project_tracking database ingestion (default\: false i.e. JSON file will NOT be created)]"
  {-l,--log}"[log level (default\: info)]:log:(debug info warning error critical)"
  "--no-json[do not create JSON file per analysed sample to track the analysis status (default\: false i.e. JSON file will be created)]"
  {-o,--output-dir}"[output directory (default\: current)]:output_dir:"
  "--sanity-check[run the pipeline in \`sanity check mode\` to verify that all the input files needed for the pipeline to run are available on the system (default\: false)]"
  {-s,--steps}"[step range e.g. \'1-5\', \'3,6,7\', \'2,4-8\']:steps:"
  "--wrap[Path to the genpipe cvmfs wrapper script.
Default is genpipes\/ressources\/container\/bin\/container_wrapper.sh. This is a convenience options for using genpipes in a container]:wrap:"
  {-r,--readsets}"[readset file]:readsets_file:"
  {-d,--design}"[design file]:design_file:"
  "(- : *)"{-v,--version}"[show the version information and exit]"
)


_shtab_genpipes() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_genpipes_options[(I)${(q)one_or_more}*]} + ${_shtab_genpipes_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_genpipes_options+=(': :_shtab_genpipes_commands' '*::: :->genpipes')
  fi
  _arguments -C -s $_shtab_genpipes_options

  case $state in
    genpipes)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_genpipes-$line[1]:"
      case $line[1] in
        ampliconseq) _arguments -C -s $_shtab_genpipes_ampliconseq_options ;;
        chipseq) _arguments -C -s $_shtab_genpipes_chipseq_options ;;
        covseq) _arguments -C -s $_shtab_genpipes_covseq_options ;;
        dnaseq) _arguments -C -s $_shtab_genpipes_dnaseq_options ;;
        methylseq) _arguments -C -s $_shtab_genpipes_methylseq_options ;;
        nanopore) _arguments -C -s $_shtab_genpipes_nanopore_options ;;
        nanopore_covseq) _arguments -C -s $_shtab_genpipes_nanopore_covseq_options ;;
        rnaseq) _arguments -C -s $_shtab_genpipes_rnaseq_options ;;
        rnaseq_denovo_assembly) _arguments -C -s $_shtab_genpipes_rnaseq_denovo_assembly_options ;;
        rnaseq_light) _arguments -C -s $_shtab_genpipes_rnaseq_light_options ;;
      esac
  esac
}



typeset -A opt_args

if [[ $zsh_eval_context[-1] == eval ]]; then
  # eval/source/. command, register function for later
  compdef _shtab_genpipes -N genpipes
else
  # autoload from fpath, call function directly
  _shtab_genpipes "$@"
fi

